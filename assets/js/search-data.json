{
  
    
        "post0": {
            "title": "Fine-tuning a BERT model with transformers",
            "content": "This post describes a simple way to get started with fine-tuning transformer models. It will cover the basics and introduce you to the amazing Trainer class from the transformers library. I will leave important topics such as hyperparameter tuning, cross-validation and more detailed model validation to followup posts. . We use a dataset built from COVID-19 Open Research Dataset Challenge. This work is one small piece of a larger project that is to build the cord19 search app. . Load the dataset . In order to fine-tune the BERT models for the cord19 application we need to generate a set of query-document features as well as labels that indicate which documents are relevant for the specific queries. For this exercise we will use the query string to represent the query and the title string to represent the documents. . training_data = read_csv(&quot;https://thigm85.github.io/data/cord19/cord19-query-title-label.csv&quot;) training_data.head() . query title label . 0 coronavirus origin | Monophyletic Relationship between Severe Acute... | 1 | . 1 coronavirus origin | Comprehensive overview of COVID-19 based on cu... | 1 | . 2 coronavirus origin | The SARS, MERS and novel coronavirus (COVID-19... | 1 | . 3 coronavirus origin | Evidence for zoonotic origins of Middle East r... | 1 | . 4 coronavirus origin | Deadly virus effortlessly hops species | 1 | . There are 50 unique queries. . len(training_data[&quot;query&quot;].unique()) . 50 . For each query we have a list of documents, divided between relevant (label=1) and irrelevant (label=0). . training_data[[&quot;title&quot;, &quot;label&quot;]].groupby(&quot;label&quot;).count() . title . label . 0 30272 | . 1 21120 | . Data split . We are going to use a simple data split into train and validation sets for illustration purposes. Even though we have more than 50 thousand data points when we consider unique query and document pairs, I believe this specific case would benefit from cross-validation since it has only 50 queries containing relevance judgement. . from sklearn.model_selection import train_test_split train_queries, val_queries, train_docs, val_docs, train_labels, val_labels = train_test_split( training_data[&quot;query&quot;].tolist(), training_data[&quot;title&quot;].tolist(), training_data[&quot;label&quot;].tolist(), test_size=.2 ) . Create BERT encodings . Create train and validation encodings. In order to do that we need to chose which BERT model to use. We can optionally specify further details such as padding and truncation. . from transformers import BertTokenizerFast model_name = &quot;google/bert_uncased_L-4_H-512_A-8&quot; tokenizer = BertTokenizerFast.from_pretrained(model_name) train_encodings = tokenizer(train_queries, train_docs) val_encodings = tokenizer(val_queries, val_docs) . Create a custom dataset . Now that we have the encodings and the labels we can create a Dataset object as described in the transformers webpage about custom datasets. . import torch class Cord19Dataset(torch.utils.data.Dataset): def __init__(self, encodings, labels): self.encodings = encodings self.labels = labels def __getitem__(self, idx): item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()} item[&#39;labels&#39;] = torch.tensor(self.labels[idx]) return item def __len__(self): return len(self.labels) train_dataset = Cord19Dataset(train_encodings, train_labels) val_dataset = Cord19Dataset(val_encodings, val_labels) . Fine-tune the BERT model . We are going to use BertForSequenceClassification, since we are trying to classify query and document pairs into two distinct classes (non-relevant, relevant). . from transformers import BertForSequenceClassification model = BertForSequenceClassification.from_pretrained(model_name) . We can set requires_grad to False for all the base model parameters in order to fine-tune only the task-specific parameters. . for param in model.base_model.parameters(): param.requires_grad = False . We can then fine-tune the model with Trainer. Below is a basic routine with out-of-the-box set of parameters. Care should be taken when chosing the parameters below, but this is out of the scope of this piece. . from transformers import Trainer, TrainingArguments training_args = TrainingArguments( output_dir=&#39;./results&#39;, # output directory evaluation_strategy=&quot;epoch&quot;, # Evaluation is done at the end of each epoch. num_train_epochs=3, # total number of training epochs per_device_train_batch_size=16, # batch size per device during training per_device_eval_batch_size=64, # batch size for evaluation warmup_steps=500, # number of warmup steps for learning rate scheduler weight_decay=0.01, # strength of weight decay save_total_limit=1, # limit the total amount of checkpoints. Deletes the older checkpoints. ) trainer = Trainer( model=model, # the instantiated 🤗 Transformers model to be trained args=training_args, # training arguments, defined above train_dataset=train_dataset, # training dataset eval_dataset=val_dataset # evaluation dataset ) trainer.train() . Export the model to onnx . Once training is complete we can export the model using the ONNX format to be deployed elsewhere. . from torch.onnx import export from pathlib import Path model_onnx_path = Path(model_name + &quot;.onnx&quot;) dummy_input = ( train_dataset[0][&quot;input_ids&quot;].unsqueeze(0), train_dataset[0][&quot;token_type_ids&quot;].unsqueeze(0), train_dataset[0][&quot;attention_mask&quot;].unsqueeze(0) ) input_names = [&quot;input_ids&quot;, &quot;token_type_ids&quot;, &quot;attention_mask&quot;] output_names = [&quot;logits&quot;] export( model, dummy_input, model_onnx_path, input_names = input_names, output_names = output_names, verbose=False, opset_version=11 ) .",
            "url": "https://thigm85.github.io/blog/bert/transformers/2020/11/12/fine-tune-bert-basic-transformers-trainer.html",
            "relUrl": "/bert/transformers/2020/11/12/fine-tune-bert-basic-transformers-trainer.html",
            "date": " • Nov 12, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Debug first iteration of BERT models",
            "content": "Context . I have fine-tuned a BERT model using a simple training routine. I then deployed a simplified cord19 application on my laptop to validate the model. We will investigate some strange results we found in a previous sprint. . Evaluate ranking functions . Connect to my local Vespa app. . from vespa.application import Vespa app = Vespa(url = &quot;http://localhost&quot;, port = 8080) . Define different query models. bert_index_1 uses the correct output from the BERT model used, which is the probability of the document being relevant. bert was a mistake I made when I used the wrong output to rank the documents. It is still here because it will be part of my investigations later. . from vespa.query import Query, RankProfile as Ranking, OR query_models = { &quot;or_bm25&quot;: Query( match_phase = OR(), rank_profile = Ranking(name=&quot;bm25&quot;) ), &quot;or_bm25_bert&quot;: Query( match_phase = OR(), rank_profile = Ranking(name=&quot;bert&quot;) ), &quot;or_bm25_bert_index_1&quot;: Query( match_phase = OR(), rank_profile = Ranking(name=&quot;bert_index_1&quot;) ) } . The evaluation metrics that we want to compute. . from vespa.evaluation import MatchRatio, Recall, ReciprocalRank, NormalizedDiscountedCumulativeGain eval_metrics = [MatchRatio(), Recall(at=10), ReciprocalRank(at=10), NormalizedDiscountedCumulativeGain(at=10)] . Load labeled data. You can download it here. . import json labelled_data = json.load(open(&quot;cord19/labelled_data.json&quot;, &quot;r&quot;)) . We will need to tokenizer to convert the query string to embedding vector. . from transformers import BertTokenizerFast tokenizer = BertTokenizerFast.from_pretrained(&#39;bert-base-uncased&#39;) . Compute evaluation metrics for each query model and each query. . from pandas import DataFrame evaluations = {} for query_model in query_models: evaluation = [] for query_data in labelled_data: print(query_data[&quot;query_id&quot;]) evaluation_query = app.evaluate_query( eval_metrics=eval_metrics, query_model=query_models[query_model], query_id=query_data[&quot;query_id&quot;], query=query_data[&quot;query&quot;], id_field = &quot;cord_uid&quot;, relevant_docs=query_data[&quot;relevant_docs&quot;], hits = 10, timeout=&quot;100s&quot;, **{&quot;ranking.features.query(query_token_ids)&quot;: str(tokenizer( str(query_data[&quot;query&quot;]), truncation=True, padding=&quot;max_length&quot;, max_length=64, add_special_tokens=False )[&quot;input_ids&quot;])} ) evaluation.append(evaluation_query) evaluations[query_model] = DataFrame.from_records(evaluation) . Organize the data into a nicer format to work with. . import pandas as pd metric_values = [] for query_model in query_models: for metric in eval_metrics: metric_values.append( pd.DataFrame( data={ &quot;query_model&quot;: query_model, &quot;metric&quot;: metric.name, &quot;value&quot;: evaluations[query_model][metric.name + &quot;_value&quot;].to_list() } ) ) metric_values = pd.concat(metric_values, ignore_index=True) . Recall issue . The recall issue is that different query models were giving different recall metrics, even though they all had the same matching and ranking-phase and were just reordering the top 10 positions. . second-phase { rerank-count: 10 expression: sum(eval) } . metric_values[metric_values.metric == &quot;recall_10&quot;].groupby([&#39;query_model&#39;, &#39;metric&#39;]).median() . value . query_model metric . or_bm25 recall_10 0.007412 | . or_bm25_bert recall_10 0.008076 | . or_bm25_bert_index_1 recall_10 0.008118 | . It seems that Vespa reorder the top 11 documents, even though rerank-count: 10, as I show below. . Identify which queries are responsible for the difference: . from pandas import merge recall_measures = merge( left=evaluations[&quot;or_bm25&quot;], right=evaluations[&quot;or_bm25_bert_index_1&quot;], on=&quot;query_id&quot; )[[&quot;query_id&quot;, &quot;recall_10_value_x&quot;, &quot;recall_10_value_y&quot;]] recall_measures[recall_measures.recall_10_value_x != recall_measures.recall_10_value_y] . query_id recall_10_value_x recall_10_value_y . 14 15 | 0.006726 | 0.004484 | . 16 17 | 0.006974 | 0.008368 | . 20 21 | 0.006088 | 0.007610 | . 32 33 | 0.006515 | 0.009772 | . 38 39 | 0.007165 | 0.008188 | . 40 41 | 0.014045 | 0.016854 | . 49 50 | 0.020134 | 0.013423 | . Query two different rank profiles. . query_data = labelled_data[14] result_bm25 = app.query(query=query_data[&quot;query&quot;], query_model=query_models[&quot;or_bm25&quot;], hits = 10, ) bm25_ids = [hit[&quot;fields&quot;][&quot;cord_uid&quot;] for hit in result_bm25.hits] result_bm25_bert = app.query(query=query_data[&quot;query&quot;], query_model=query_models[&quot;or_bm25_bert_index_1&quot;], hits = 10, timeout=&quot;100s&quot;, **{&quot;ranking.features.query(query_token_ids)&quot;: str(tokenizer( str(query_data[&quot;query&quot;]), truncation=True, padding=&quot;max_length&quot;, max_length=64, add_special_tokens=False )[&quot;input_ids&quot;])} ) bm25_bert_ids = [hit[&quot;fields&quot;][&quot;cord_uid&quot;] for hit in result_bm25_bert.hits] . Check which id is in the BERT top 10 but not in the BM25 top 10: . id_in_bert_not_in_bm25 = [x for x in bm25_bert_ids if x not in bm25_ids] id_in_bert_not_in_bm25 . [&#39;ecu579el&#39;] . List the top 11 results from BM25. Notice that the missing doc is in the 11th position. . result_bm25_11 = [hit[&quot;fields&quot;][&quot;cord_uid&quot;] for hit in app.query(query=query_data[&quot;query&quot;], query_model=query_models[&quot;or_bm25&quot;], hits = 11).hits] . result_bm25_11 . [&#39;zpek8i5e&#39;, &#39;75u57fw1&#39;, &#39;up5jpq45&#39;, &#39;qmrntk43&#39;, &#39;cxfzs68n&#39;, &#39;y2nhss9u&#39;, &#39;94puwlbm&#39;, &#39;zpmdrh4q&#39;, &#39;fpexj3s5&#39;, &#39;axljtddn&#39;, &#39;ecu579el&#39;] . Positive and null NDGC issue . When querying @bergum dev instance I found cases where the NDCG @ 10 was positive for BM25 model and zero for the BERT re-rank model, as we can see in the picture below, which makes no sense. . . I could not reproduce the NDCG issue and the results were as expected on my local instance, as I show below. . from pandas import merge ndcg_measures = merge( left=evaluations[&quot;or_bm25&quot;], right=evaluations[&quot;or_bm25_bert_index_1&quot;], on=&quot;query_id&quot; )[[&quot;query_id&quot;, &quot;ndcg_10_value_x&quot;, &quot;ndcg_10_value_y&quot;]] . ndcg_measures . query_id ndcg_10_value_x ndcg_10_value_y . 0 1 | 0.683159 | 0.812003 | . 1 2 | 0.000000 | 0.000000 | . 2 3 | 0.450853 | 0.619669 | . 3 4 | 0.000000 | 0.000000 | . 4 5 | 0.397809 | 0.455605 | . 5 6 | 0.678762 | 0.901013 | . 6 7 | 0.888733 | 0.629200 | . 7 8 | 0.527845 | 0.947807 | . 8 9 | 0.859413 | 0.569139 | . 9 10 | 0.541696 | 0.880740 | . 10 11 | 0.000000 | 0.000000 | . 11 12 | 0.510384 | 0.844481 | . 12 13 | 0.500000 | 0.386853 | . 13 14 | 0.847790 | 0.855857 | . 14 15 | 0.882121 | 0.859719 | . 15 16 | 0.588160 | 0.792087 | . 16 17 | 0.674788 | 0.907813 | . 17 18 | 0.758879 | 0.652883 | . 18 19 | 0.695950 | 0.421776 | . 19 20 | 0.769846 | 0.991829 | . 20 21 | 0.581889 | 0.651197 | . 21 22 | 0.301030 | 0.430677 | . 22 23 | 0.735734 | 0.686502 | . 23 24 | 0.963487 | 0.857319 | . 24 25 | 0.570642 | 0.650921 | . 25 26 | 0.918849 | 0.868415 | . 26 27 | 0.533893 | 0.493208 | . 27 28 | 0.548702 | 0.575719 | . 28 29 | 0.966813 | 0.907663 | . 29 30 | 0.811837 | 0.804581 | . 30 31 | 0.000000 | 0.000000 | . 31 32 | 0.430677 | 0.630930 | . 32 33 | 0.707489 | 0.426919 | . 33 34 | 0.430677 | 0.630930 | . 34 35 | 0.489969 | 0.906025 | . 35 36 | 0.846117 | 0.879854 | . 36 37 | 0.950421 | 0.950421 | . 37 38 | 0.783761 | 0.800132 | . 38 39 | 0.976409 | 0.710612 | . 39 40 | 0.815931 | 0.559814 | . 40 41 | 0.806327 | 0.970409 | . 41 42 | 0.763499 | 0.706410 | . 42 43 | 0.926285 | 0.702700 | . 43 44 | 0.833223 | 0.579375 | . 44 45 | 0.804465 | 0.710549 | . 45 46 | 0.965444 | 0.622067 | . 46 47 | 0.796498 | 0.717333 | . 47 48 | 0.505179 | 0.917655 | . 48 49 | 0.531761 | 0.864027 | . 49 50 | 0.445734 | 0.422790 | . import plotly.graph_objects as go ids=ndcg_measures.query_id.tolist() fig = go.Figure(data=[ go.Bar(name=&#39;BM25&#39;, x=ids, y=ndcg_measures.ndcg_10_value_x.tolist()), go.Bar(name=&#39;BM25 + BERT&#39;, x=ids, y=ndcg_measures.ndcg_10_value_y.tolist()) ]) # Change the bar mode fig.update_layout(barmode=&#39;group&#39;, xaxis=dict(type=&#39;category&#39;)) fig.show() . Bergum&#39;s instance . @bergum dev instance was down, so I could not check his results again, but below is the code I would use it. . from vespa.application import Vespa app = Vespa( url=&quot;https://bergum.cord-19.vespa-team.aws-us-east-1c.dev.public.vespa.oath.cloud&quot;, cert=&quot;/Users/tmartins/projects/vespa/pyvespa/docs/sphinx/source/use_cases/cord19/data-plane-joint.txt&quot; ) . from vespa.query import Query, RankProfile, OR query_models = { &quot;or_bm25&quot;: Query( match_phase = OR(), rank_profile = Ranking(name=&quot;bm25&quot;) ), &quot;or_bm25_bert&quot;: Query( match_phase = OR(), rank_profile = Ranking(name=&quot;bert&quot;) ) } . from pandas import DataFrame evaluations = {} for query_model in query_models: evaluation = [] for query_data in labelled_data: print(query_data[&quot;query_id&quot;]) body = { &quot;yql&quot;: &quot;select * from sources * where userQuery();&quot;, &quot;query&quot;: query_data[&quot;query&quot;], &quot;type&quot;: &quot;any&quot;, &quot;model.defaultIndex&quot;: &quot;default&quot;, &quot;hits&quot;: 10, &quot;collapsefield&quot;: &quot;title&quot;, &quot;timeout&quot;: &quot;100s&quot;, &quot;ranking&quot;: query_models[query_model].rank_profile.name } evaluation_query = app.evaluate_query( eval_metrics=eval_metrics, query_model=query_models[query_model], query_id=query_data[&quot;query_id&quot;], query=query_data[&quot;query&quot;], id_field = &quot;cord_uid&quot;, relevant_docs=query_data[&quot;relevant_docs&quot;], body=body, ) evaluation.append(evaluation_query) evaluations[query_model] = DataFrame.from_records(evaluation) . Effect of using different model outputs from BERT . For a moment I thought that the results were similar, nor matter this model output I used. This would indicate a bug. After further analysis I realized that this made no sense, as expected. Using the right model output yielded much better results. . import plotly.express as px fig = px.box(metric_values[(metric_values.metric == &quot;ndcg_10&quot;) &amp; (metric_values.query_model != &quot;or_bm25&quot;)], x=&quot;query_model&quot;, y=&quot;value&quot;, points=&quot;all&quot;) fig.show() .",
            "url": "https://thigm85.github.io/blog/vespa/pyvespa/sprint/2020/11/08/cord19-debug-bert-issues.html",
            "relUrl": "/vespa/pyvespa/sprint/2020/11/08/cord19-debug-bert-issues.html",
            "date": " • Nov 8, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fine-tuning a BERT model for search applications with Optuna tuning",
            "content": "In case running on Google Colab . Mount your Google Drive to be able to load and save data to it. . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Mounted at /content/drive . Install libraries used in this post. . !pip install transformers torch onnxruntime optuna . Prepare the dataset . Load the data . In order to fine-tune the BERT models for the cord19 application we need to generate a set of query-document features as well as labels that indicate which documents are relevant for the specific queries. For this exercise we will use the query string to represent the query and the title string to represent the documents. . The file labelled_data.json contains information about the query string and the file training_all_judgement_data.csv contain information about labels and title string. Those files were created and covered elsewhere but you can download them here and here. . import json from pandas import read_csv labelled_data = json.load(open(&quot;/content/drive/My Drive/cord19/labelled_data_all.json&quot;, &quot;r&quot;)) training_data = read_csv(&quot;/content/drive/My Drive/cord19/training_all_jugdments_data.csv&quot;) . training_data has almost everything we need, except the query string. . training_data.head() . document_id query_id label title-full . 0 005b2j4b | 1 | 2 | Monophyletic Relationship between Severe Acute... | . 1 00fmeepz | 1 | 1 | Comprehensive overview of COVID-19 based on cu... | . 2 010vptx3 | 1 | 2 | The SARS, MERS and novel coronavirus (COVID-19... | . 3 0194oljo | 1 | 1 | Evidence for zoonotic origins of Middle East r... | . 4 021q9884 | 1 | 1 | Deadly virus effortlessly hops species | . The query string can be obtained from the labelled_data. . print(labelled_data[0][&quot;query_id&quot;], labelled_data[0][&quot;query&quot;]) . 1 coronavirus origin . Compatible BERT encodings . Since we are training a model that will be deployed in a search application, we need to ensure that the training encodings are compatible with encodings used at serving time. At serving time, document encodings will be applied offline when feeding the documents to the search engine while the query encoding will be applied at run-time upon arrival of the query. In addition, it might be relevant to use different maximum length for queries and documents. . def create_bert_encodings(queries, docs, tokenizer, query_input_size, doc_input_size): queries_encodings = tokenizer( queries, truncation=True, max_length=query_input_size-2, add_special_tokens=False ) docs_encodings = tokenizer( docs, truncation=True, max_length=doc_input_size-1, add_special_tokens=False ) TOKEN_NONE=0 TOKEN_CLS=101 TOKEN_SEP=102 input_ids = [] token_type_ids = [] attention_mask = [] for query_input_ids, doc_input_ids in zip(queries_encodings[&quot;input_ids&quot;], docs_encodings[&quot;input_ids&quot;]): # create input id input_id = [TOKEN_CLS] + query_input_ids + [TOKEN_SEP] + doc_input_ids + [TOKEN_SEP] number_tokens = len(input_id) padding_length = max(128 - number_tokens, 0) input_id = input_id + [TOKEN_NONE] * padding_length input_ids.append(input_id) # create token id token_type_id = [0] * len([TOKEN_CLS] + query_input_ids + [TOKEN_SEP]) + [1] * len(doc_input_ids + [TOKEN_SEP]) + [TOKEN_NONE] * padding_length token_type_ids.append(token_type_id) # create attention_mask attention_mask.append([1] * number_tokens + [TOKEN_NONE] * padding_length) encodings = { &quot;input_ids&quot;: input_ids, &quot;token_type_ids&quot;: token_type_ids, &quot;attention_mask&quot;: attention_mask } return encodings . Create Datasets . Create a list for queries (represented by the query string), docs (represented by the doc titles) and labels from the labelled_data and training_data that we loaded earlier. . train_queries = [] train_docs = [] train_labels = [] for data_point in labelled_data: query_id = data_point[&quot;query_id&quot;] titles = training_data[training_data[&quot;query_id&quot;] == query_id][&quot;title-full&quot;].tolist() train_docs.extend(titles) train_labels.extend([1 if x &gt; 0 else 0 for x in training_data[training_data[&quot;query_id&quot;] == query_id][&quot;label&quot;].tolist()]) query = data_point[&quot;query&quot;] train_queries.extend([query] * len(titles)) . We are going to use a simple data split into train and validation sets for illustration purposes. The cord19 use case probably needs cross-validation to be used since it has only 50 queries containing relevance judgement. . from sklearn.model_selection import train_test_split train_queries, val_queries, train_docs, val_docs, train_labels, val_labels = train_test_split( train_queries, train_docs, train_labels, test_size=.2 ) . Create train and validation encodings. In order to do that we need to chose which BERT model to use, and the maximum size used for the resulting query and document vector. . model_name = &quot;google/bert_uncased_L-4_H-512_A-8&quot; query_input_size=24 doc_input_size=64 . from transformers import BertTokenizerFast tokenizer = BertTokenizerFast.from_pretrained(model_name) train_encodings = create_bert_encodings( queries=train_queries, docs=train_docs, tokenizer=tokenizer, query_input_size=query_input_size, doc_input_size=doc_input_size ) val_encodings = create_bert_encodings( queries=val_queries, docs=val_docs, tokenizer=tokenizer, query_input_size=query_input_size, doc_input_size=doc_input_size ) . Now that we have the encodings and the labels we can create a Dataset object as described in the transformers webpage about custom datasets. . import torch class Cord19Dataset(torch.utils.data.Dataset): def __init__(self, encodings, labels): self.encodings = encodings self.labels = labels def __getitem__(self, idx): item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()} item[&#39;labels&#39;] = torch.tensor(self.labels[idx]) return item def __len__(self): return len(self.labels) train_dataset = Cord19Dataset(train_encodings, train_labels) val_dataset = Cord19Dataset(val_encodings, val_labels) . Fine-tune the BERT model . We can then fine-tune the model (only task specific weights). . Define accuracy metric. . from transformers import EvalPrediction import numpy as np def compute_metrics(p: EvalPrediction): preds = p.predictions[0] if isinstance(p.predictions, tuple) else p.predictions preds = np.argmax(preds, axis=1) return {&quot;accuracy&quot;: (preds == p.label_ids).astype(np.float32).mean().item()} . Hyperparameter tunning with Optuna. . from transformers import BertForSequenceClassification, Trainer, TrainingArguments training_args = TrainingArguments( output_dir=&#39;/content/results&#39;, # output directory #evaluation_strategy=&quot;epoch&quot;, # Evaluation is done at the end of each epoch. evaluation_strategy=&quot;steps&quot;, # Evaluation is done (and logged) every eval_steps. eval_steps=1000, # Number of update steps between two evaluations per_device_eval_batch_size=64, # batch size for evaluation save_total_limit=1, # limit the total amount of checkpoints. Deletes the older checkpoints. ) def model_init(): model = BertForSequenceClassification.from_pretrained(model_name) for param in model.base_model.parameters(): param.requires_grad = False return model trainer = Trainer( args=training_args, # training arguments, defined above train_dataset=train_dataset, # training dataset eval_dataset=val_dataset, # evaluation dataset compute_metrics=compute_metrics, # metrics to be computed model_init=model_init # Instantiate model before training starts ) def my_hp_space(trial): return { &quot;learning_rate&quot;: trial.suggest_float(&quot;learning_rate&quot;, 1e-4, 1e-2, log=True), &quot;num_train_epochs&quot;: trial.suggest_int(&quot;num_train_epochs&quot;, 1, 20), &quot;seed&quot;: trial.suggest_int(&quot;seed&quot;, 1, 40), &quot;per_device_train_batch_size&quot;: trial.suggest_categorical(&quot;per_device_train_batch_size&quot;, [4, 8, 16, 32, 64]), } def my_objective(metrics): return metrics[&quot;eval_loss&quot;] best_run = trainer.hyperparameter_search(direction=&quot;minimize&quot;, hp_space=my_hp_space, compute_objective=my_objective, n_trials=100) with open(&quot;/content/drive/My Drive/cord19/best_run.json&quot;, &quot;w+&quot;) as f: f.write(json.dumps(best_run.hyperparameters)) . Inspect best parameters . best_run.hyperparameters . Retrain using the best parameters and the entire dataset (need to create complete_dataset) . training_args = TrainingArguments( output_dir=&#39;/content/results&#39;, # output directory evaluation_strategy=&quot;epoch&quot;, # Evaluation is done at the end of each epoch. per_device_eval_batch_size=64, # batch size for evaluation save_total_limit=2, # limit the total amount of checkpoints. Deletes the older checkpoints. **best_run.hyperparameters ) trainer = Trainer( args=training_args, # training arguments, defined above train_dataset=complte_dataset, # training dataset compute_metrics=compute_metrics, # metrics to be computed model_init=model_init # Instantiate model before training starts ) trainer.train() .",
            "url": "https://thigm85.github.io/blog/search/cord19/bert/transformers/optuna/2020/11/07/bert-training-optuna-tuning.html",
            "relUrl": "/search/cord19/bert/transformers/optuna/2020/11/07/bert-training-optuna-tuning.html",
            "date": " • Nov 7, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Feed, get, update and delete Vespa data with pyvespa",
            "content": "Connect to Vespa instance . Connect to a running Vespa instance: . app = Vespa(url = &quot;http://localhost&quot;, port = 8080) . Assume the Vespa instance has a Schema called msmarco with the following fields: . document = Document( fields=[ Field(name=&quot;id&quot;, type=&quot;string&quot;, indexing=[&quot;attribute&quot;, &quot;summary&quot;]), Field( name=&quot;title&quot;, type=&quot;string&quot;, indexing=[&quot;index&quot;, &quot;summary&quot;], index=&quot;enable-bm25&quot;, ), Field( name=&quot;body&quot;, type=&quot;string&quot;, indexing=[&quot;index&quot;, &quot;summary&quot;], index=&quot;enable-bm25&quot;, ), ] ) . Data operations . Feed data . response = app.feed_data_point( schema=&quot;msmarco&quot;, data_id=&quot;1&quot;, fields={ &quot;id&quot;: &quot;1&quot;, &quot;title&quot;: &quot;this is my first title&quot;, &quot;body&quot;: &quot;this is my first body&quot;, }, ) assert response.json()[&quot;id&quot;] == &quot;id:msmarco:msmarco::1&quot; . Get data . response = app.get_data(schema=&quot;msmarco&quot;, data_id=&quot;1&quot;) expected_data = { &quot;fields&quot;: { &quot;id&quot;: &quot;1&quot;, &quot;title&quot;: &quot;this is my first title&quot;, &quot;body&quot;: &quot;this is my first body&quot;, }, &quot;id&quot;: &quot;id:msmarco:msmarco::1&quot;, &quot;pathId&quot;: &quot;/document/v1/msmarco/msmarco/docid/1&quot; } assert response.status_code == 200 assert response.json() == expected_data . Update data . response = app.update_data( schema=&quot;msmarco&quot;, data_id=&quot;1&quot;, fields={&quot;title&quot;: &quot;this is my updated title&quot;} ) assert response.json()[&quot;id&quot;] == &quot;id:msmarco:msmarco::1&quot; . Delete data . response = app.delete_data(schema=&quot;msmarco&quot;, data_id=&quot;1&quot;) assert response.json()[&quot;id&quot;] == &quot;id:msmarco:msmarco::1&quot; .",
            "url": "https://thigm85.github.io/blog/search/pyvespa/vespa/2020/11/06/pyvespa-include-data-operations.html",
            "relUrl": "/search/pyvespa/vespa/2020/11/06/pyvespa-include-data-operations.html",
            "date": " • Nov 6, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "How to evaluate Vespa ranking functions from python",
            "content": "Download processed data . We can start by downloading the data that we have processed before. . import requests, json from pandas import read_csv topics = json.loads( requests.get(&quot;https://thigm85.github.io/data/cord19/topics.json&quot;).text ) relevance_data = read_csv(&quot;https://thigm85.github.io/data/cord19/relevance_data.csv&quot;) . topics contain data about the 50 topics available, including query, question and narrative. . topics[&quot;1&quot;] . {&#39;query&#39;: &#39;coronavirus origin&#39;, &#39;question&#39;: &#39;what is the origin of COVID-19&#39;, &#39;narrative&#39;: &#34;seeking range of information about the SARS-CoV-2 virus&#39;s origin, including its evolution, animal source, and first transmission into humans&#34;} . relevance_data contains the relevance judgments for each of the 50 topics. . relevance_data.head(5) . topic_id round_id cord_uid relevancy . 0 1 | 4.5 | 005b2j4b | 2 | . 1 1 | 4.0 | 00fmeepz | 1 | . 2 1 | 0.5 | 010vptx3 | 2 | . 3 1 | 2.5 | 0194oljo | 1 | . 4 1 | 4.0 | 021q9884 | 1 | . Install pyvespa . We are going to use pyvespa to evaluate ranking functions from python. . !pip install pyvespa . pyvespa provides a python API to Vespa. It allow us to create, modify, deploy and interact with running Vespa instances. The main goal of the library is to allow for faster prototyping and to facilitate Machine Learning experiments for Vespa applications. . Format the labeled data into expected pyvespa format . pyvespa expects labeled data to follow the format illustrated below. It is a list of dict where each dict represents a query containing query_id, query and a list of relevant_docs. Each relevant document contains a required id key and an optional score key. . labeled_data = [ { &#39;query_id&#39;: 1, &#39;query&#39;: &#39;coronavirus origin&#39;, &#39;relevant_docs&#39;: [{&#39;id&#39;: &#39;005b2j4b&#39;, &#39;score&#39;: 2}, {&#39;id&#39;: &#39;00fmeepz&#39;, &#39;score&#39;: 1}] }, { &#39;query_id&#39;: 2, &#39;query&#39;: &#39;coronavirus response to weather changes&#39;, &#39;relevant_docs&#39;: [{&#39;id&#39;: &#39;01goni72&#39;, &#39;score&#39;: 2}, {&#39;id&#39;: &#39;03h85lvy&#39;, &#39;score&#39;: 2}] } ] . We can create labeled_data from the topics and relevance_data that we downloaded before. We are only going to include documents with relevance score &gt; 0 into the final list. . labeled_data = [ { &quot;query_id&quot;: int(topic_id), &quot;query&quot;: topics[topic_id][&quot;query&quot;], &quot;relevant_docs&quot;: [ { &quot;id&quot;: row[&quot;cord_uid&quot;], &quot;score&quot;: row[&quot;relevancy&quot;] } for idx, row in relevance_data[relevance_data.topic_id == int(topic_id)].iterrows() if row[&quot;relevancy&quot;] &gt; 0 ] } for topic_id in topics.keys()] . Define query models to be evaluated . We are going to define two query models to be evaluated here. Both will match all the documents that share at least one term with the query. This is defined by setting match_phase = OR(). . The difference between the query models happens in the ranking phase. The or_default model will rank documents based on nativeRank while the or_bm25 model will rank documents based on BM25. Discussion about those two types of ranking is out of the scope of this tutorial. It is enough to know that they rank documents according to two different formulas. . Those ranking profiles were defined by the team behind the cord19 app and can be found here. . from vespa.query import Query, RankProfile, OR query_models = { &quot;or_default&quot;: Query( match_phase = OR(), rank_profile = RankProfile(name=&quot;default&quot;) ), &quot;or_bm25&quot;: Query( match_phase = OR(), rank_profile = RankProfile(name=&quot;bm25t5&quot;) ) } . Define metrics to be used in the evaluation . We would like to compute the following metrics: . The percentage of documents matched by the query . | Recall @ 10 . | Reciprocal rank @ 10 . | NDCG @ 10 . | . from vespa.evaluation import ( MatchRatio, Recall, ReciprocalRank, NormalizedDiscountedCumulativeGain, ) eval_metrics = [ MatchRatio(), Recall(at=10), ReciprocalRank(at=10), NormalizedDiscountedCumulativeGain(at=10) ] . Evaluate . Connect to a running Vespa instance: . from vespa.application import Vespa app = Vespa(url = &quot;https://api.cord19.vespa.ai&quot;) . Compute the metrics defined above for each query model and store the results in a dictionary. . evaluations = {} for query_model in query_models: evaluations[query_model] = app.evaluate( labeled_data = labeled_data, eval_metrics = eval_metrics, query_model = query_models[query_model], id_field = &quot;cord_uid&quot;, hits = 10 ) . Analyze results . Let’s first combine the data into one DataFrame in a format to facilitate a comparison between query models. . import pandas as pd metric_values = [] for query_model in query_models: for metric in eval_metrics: metric_values.append( pd.DataFrame( data={ &quot;query_model&quot;: query_model, &quot;metric&quot;: metric.name, &quot;value&quot;: evaluations[query_model][metric.name + &quot;_value&quot;].to_list() } ) ) metric_values = pd.concat(metric_values, ignore_index=True) metric_values.head() . query_model metric value . 0 or_default | match_ratio | 0.231523 | . 1 or_default | match_ratio | 0.755509 | . 2 or_default | match_ratio | 0.265400 | . 3 or_default | match_ratio | 0.843403 | . 4 or_default | match_ratio | 0.901592 | . We can see below that the query model based on BM25 is superior across all metrics considered here. . metric_values.groupby([&#39;query_model&#39;, &#39;metric&#39;]).mean() . value . query_model metric . or_bm25 match_ratio 0.412386 | . ndcg_10 0.651929 | . recall_10 0.007654 | . reciprocal_rank_10 0.610270 | . or_default match_ratio 0.412386 | . ndcg_10 0.602556 | . recall_10 0.005435 | . reciprocal_rank_10 0.564437 | . We can also visualize the distribution of the metrics across the queries to get a better picture of the results. . import plotly.express as px fig = px.box( metric_values[metric_values.metric == &quot;ndcg_10&quot;], x=&quot;query_model&quot;, y=&quot;value&quot;, title=&quot;Ndgc @ 10&quot;, points=&quot;all&quot; ) fig.show() .",
            "url": "https://thigm85.github.io/blog/search/cord19/vespa/pyvespa/2020/11/05/cord19-connect-evaluate.html",
            "relUrl": "/search/cord19/vespa/pyvespa/2020/11/05/cord19-connect-evaluate.html",
            "date": " • Nov 5, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Fine-tuning a BERT model for search applications",
            "content": "Load the dataset . In order to fine-tune the BERT models for the cord19 application we need to generate a set of query-document features as well as labels that indicate which documents are relevant for the specific queries. For this exercise we will use the query string to represent the query and the title string to represent the documents. . The file labelled_data.json contains information about the query string and the file training_all_judgement_data.csv contain information about labels and title string. Those files were created and covered elsewhere but you can download them here and here. . import json from pandas import read_csv labelled_data = json.load(open(&quot;labelled_data_all.json&quot;, &quot;r&quot;)) training_data = read_csv(&quot;training_all_jugdments_data.csv&quot;) . training_data has almost everything we need, except the query string. . training_data.head() . document_id query_id label title-full . 0 005b2j4b | 1 | 2 | Monophyletic Relationship between Severe Acute... | . 1 00fmeepz | 1 | 1 | Comprehensive overview of COVID-19 based on cu... | . 2 010vptx3 | 1 | 2 | The SARS, MERS and novel coronavirus (COVID-19... | . 3 0194oljo | 1 | 1 | Evidence for zoonotic origins of Middle East r... | . 4 021q9884 | 1 | 1 | Deadly virus effortlessly hops species | . The query string can be obtained from the labelled_data. . print(labelled_data[0][&quot;query_id&quot;], labelled_data[0][&quot;query&quot;]) . 1 coronavirus origin . Compatible BERT encodings . Since we are training a model that will be deployed in a search application, we need to ensure that the training encodings are compatible with encodings used at serving time. At serving time, document encodings will be applied offline when feeding the documents to the search engine while the query encoding will be applied at run-time upon arrival of the query. In addition, it might be relevant to use different maximum length for queries and documents. . def create_bert_encodings(queries, docs, tokenizer, query_input_size, doc_input_size): queries_encodings = tokenizer( queries, truncation=True, max_length=query_input_size-2, add_special_tokens=False ) docs_encodings = tokenizer( docs, truncation=True, max_length=doc_input_size-1, add_special_tokens=False ) TOKEN_NONE=0 TOKEN_CLS=101 TOKEN_SEP=102 input_ids = [] token_type_ids = [] attention_mask = [] for query_input_ids, doc_input_ids in zip(queries_encodings[&quot;input_ids&quot;], docs_encodings[&quot;input_ids&quot;]): # create input id input_id = [TOKEN_CLS] + query_input_ids + [TOKEN_SEP] + doc_input_ids + [TOKEN_SEP] number_tokens = len(input_id) padding_length = max(128 - number_tokens, 0) input_id = input_id + [TOKEN_NONE] * padding_length input_ids.append(input_id) # create token id token_type_id = [0] * len([TOKEN_CLS] + query_input_ids + [TOKEN_SEP]) + [1] * len(doc_input_ids + [TOKEN_SEP]) + [TOKEN_NONE] * padding_length token_type_ids.append(token_type_id) # create attention_mask attention_mask.append([1] * number_tokens + [TOKEN_NONE] * padding_length) encodings = { &quot;input_ids&quot;: input_ids, &quot;token_type_ids&quot;: token_type_ids, &quot;attention_mask&quot;: attention_mask } return encodings . Create Datasets . Create a list for queries (represented by the query string), docs (represented by the doc titles) and labels from the labelled_data and training_data that we loaded earlier. . train_queries = [] train_docs = [] train_labels = [] for data_point in labelled_data: query_id = data_point[&quot;query_id&quot;] titles = training_data[training_data[&quot;query_id&quot;] == query_id][&quot;title-full&quot;].tolist() train_docs.extend(titles) train_labels.extend([1 if x &gt; 0 else 0 for x in training_data[training_data[&quot;query_id&quot;] == query_id][&quot;label&quot;].tolist()]) query = data_point[&quot;query&quot;] train_queries.extend([query] * len(titles)) . We are going to use a simple data split into train and validation sets for illustration purposes. The cord19 use case probably needs cross-validation to be used since it has only 50 queries containing relevance judgement. . from sklearn.model_selection import train_test_split train_queries, val_queries, train_docs, val_docs, train_labels, val_labels = train_test_split( train_queries, train_docs, train_labels, test_size=.2 ) . Create train and validation encodings. In order to do that we need to chose which BERT model to use, and the maximum size used for the resulting query and document vector. . model_name = &quot;google/bert_uncased_L-4_H-512_A-8&quot; query_input_size=24 doc_input_size=64 . from transformers import BertTokenizerFast tokenizer = BertTokenizerFast.from_pretrained(model_name) train_encodings = create_bert_encodings( queries=train_queries, docs=train_docs, tokenizer=tokenizer, query_input_size=query_input_size, doc_input_size=doc_input_size ) val_encodings = create_bert_encodings( queries=val_queries, docs=val_docs, tokenizer=tokenizer, query_input_size=query_input_size, doc_input_size=doc_input_size ) . Now that we have the encodings and the labels we can create a Dataset object as described in the transformers webpage about custom datasets. . import torch class Cord19Dataset(torch.utils.data.Dataset): def __init__(self, encodings, labels): self.encodings = encodings self.labels = labels def __getitem__(self, idx): item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()} item[&#39;labels&#39;] = torch.tensor(self.labels[idx]) return item def __len__(self): return len(self.labels) train_dataset = Cord19Dataset(train_encodings, train_labels) val_dataset = Cord19Dataset(val_encodings, val_labels) . Fine-tune the BERT model . We can then fine-tune the model (only task specific weights). Below is a basic routine with out-of-the-box set of parameters. Care should be taken when chosing the parameters below, but this is out of the scope of this piece. . from transformers import BertForSequenceClassification, Trainer, TrainingArguments training_args = TrainingArguments( output_dir=&#39;./results&#39;, # output directory num_train_epochs=3, # total number of training epochs per_device_train_batch_size=16, # batch size per device during training per_device_eval_batch_size=64, # batch size for evaluation warmup_steps=500, # number of warmup steps for learning rate scheduler weight_decay=0.01, # strength of weight decay logging_dir=&#39;./logs&#39;, # directory for storing logs logging_steps=10, ) model = BertForSequenceClassification.from_pretrained(model_name) for param in model.base_model.parameters(): param.requires_grad = False trainer = Trainer( model=model, # the instantiated 🤗 Transformers model to be trained args=training_args, # training arguments, defined above train_dataset=train_dataset, # training dataset eval_dataset=val_dataset # evaluation dataset ) trainer.train() . Export the model to onnx . Once training is complete we can export the model using the ONNX format. . from torch.onnx import export from pathlib import Path model_onnx_path = Path(model_name + &quot;.onnx&quot;) dummy_input = ( train_dataset[0][&quot;input_ids&quot;].unsqueeze(0), train_dataset[0][&quot;token_type_ids&quot;].unsqueeze(0), train_dataset[0][&quot;attention_mask&quot;].unsqueeze(0) ) input_names = [&quot;input_ids&quot;, &quot;token_type_ids&quot;, &quot;attention_mask&quot;] output_names = [&quot;logits&quot;] export( model, dummy_input, model_onnx_path, input_names = input_names, output_names = output_names, verbose=False, opset_version=11 ) .",
            "url": "https://thigm85.github.io/blog/search/cord19/bert/transformers/2020/10/29/fine-tune-bert-search-basic.html",
            "relUrl": "/search/cord19/bert/transformers/2020/10/29/fine-tune-bert-search-basic.html",
            "date": " • Oct 29, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "How to connect and interact with search applications from python",
            "content": "Vespa is the faster, more scalable and advanced search engine currently available, imho. It has a native tensor evaluation framework, can perform approximate nearest neighbor search and deploy the latest advancencements in NLP modeling, such as BERT models. This post will give you an overview of the Vespa python API available through the pyvespa library. The main goal of the library is to allow for faster prototyping and to facilitate Machine Learning experiments for Vespa applications. . We are going to connect to the CORD-19 search app and use it as an example here. You can later use your own application to replicate the following steps. Future posts will go deeper into each topic described in this overview tutorial. . You can also run the steps contained here from Google Colab. . Install . **Warning**: The library is under active development and backward incompatible changes may occur. The library is available at PyPI and therefore can be installed with pip. . !pip install pyvespa . Connect to a running Vespa application . We can connect to a running Vespa application by creating an instance of Vespa with the appropriate url. The resulting app will then be used to communicate with the application. . from vespa.application import Vespa app = Vespa(url = &quot;https://api.cord19.vespa.ai&quot;) . Define a Query model . Easily define matching and ranking criteria . When building a search application, we usually want to experiment with different query models. A Query model consists of a match phase and a ranking phase. The matching phase will define how to match documents based on the query sent and the ranking phase will define how to rank the matched documents. Both phases can get quite complex and being able to easily express and experiment with them is very valuable. . In the example below we define the match phase to be the Union of the WeakAnd and the ANN operators. The WeakAnd will match documents based on query terms while the Approximate Nearest Neighbor (ANN) operator will match documents based on the distance between the query and document embeddings. This is an illustration of how easy it is to combine term and semantic matching in Vespa. . from vespa.query import Union, WeakAnd, ANN from random import random match_phase = Union( WeakAnd(hits = 10), ANN( doc_vector=&quot;title_embedding&quot;, query_vector=&quot;title_vector&quot;, embedding_model=lambda x: [random() for x in range(768)], hits = 10, label=&quot;title&quot; ) ) . We then define the ranking to be done by the bm25 rank-profile that is already defined in the application schema. We set list_features=True to be able to collect ranking-features later in this tutorial. After defining the match_phase and the rank_profile we can instantiate the Query model. . from vespa.query import Query, RankProfile rank_profile = RankProfile(name=&quot;bm25&quot;, list_features=True) query_model = Query(match_phase=match_phase, rank_profile=rank_profile) . Query the vespa app . Send queries via the query API. See the query page for more examples. . We can use the query_model that we just defined to issue queries to the application via the query method. . query_result = app.query( query=&quot;Is remdesivir an effective treatment for COVID-19?&quot;, query_model=query_model ) . We can see the number of documents that were retrieved by Vespa: . query_result.number_documents_retrieved . 1121 . And the number of documents that were returned to us: . len(query_result.hits) . 10 . Labelled data . How to structure labelled data . We often need to either evaluate query models or to collect data to improve query models through ML. In both cases we usually need labelled data. Let&#39;s create some labelled data to illustrate their expected format and their usage in the library. . Each data point contains a query_id, a query and relevant_docs associated with the query. . labelled_data = [ { &quot;query_id&quot;: 0, &quot;query&quot;: &quot;Intrauterine virus infections and congenital heart disease&quot;, &quot;relevant_docs&quot;: [{&quot;id&quot;: 0, &quot;score&quot;: 1}, {&quot;id&quot;: 3, &quot;score&quot;: 1}] }, { &quot;query_id&quot;: 1, &quot;query&quot;: &quot;Clinical and immunologic studies in identical twins discordant for systemic lupus erythematosus&quot;, &quot;relevant_docs&quot;: [{&quot;id&quot;: 1, &quot;score&quot;: 1}, {&quot;id&quot;: 5, &quot;score&quot;: 1}] } ] . Non-relevant documents are assigned &quot;score&quot;: 0 by default. Relevant documents will be assigned &quot;score&quot;: 1 by default if the field is missing from the labelled data. The defaults for both relevant and non-relevant documents can be modified on the appropriate methods. . Collect training data . Collect training data to analyse and/or improve ranking functions. See the collect training data page for more examples. . We can collect training data with the collect_training_data method according to a specific Query model. Below we will collect two documents for each query in addition to the relevant ones. . training_data_batch = app.collect_training_data( labelled_data = labelled_data, id_field = &quot;id&quot;, query_model = query_model, number_additional_docs = 2, fields = [&quot;rankfeatures&quot;] ) . Many rank features are returned by default. We can select some of them to inspect: . training_data_batch[ [ &quot;document_id&quot;, &quot;query_id&quot;, &quot;label&quot;, &quot;textSimilarity(title).proximity&quot;, &quot;textSimilarity(title).queryCoverage&quot;, &quot;textSimilarity(title).score&quot; ] ] . document_id query_id label textSimilarity(title).proximity textSimilarity(title).queryCoverage textSimilarity(title).score . 0 0 | 0 | 1 | 0.000000 | 0.142857 | 0.055357 | . 1 255164 | 0 | 0 | 1.000000 | 1.000000 | 1.000000 | . 2 145189 | 0 | 0 | 0.739583 | 0.571429 | 0.587426 | . 3 3 | 0 | 1 | 0.437500 | 0.142857 | 0.224554 | . 4 255164 | 0 | 0 | 1.000000 | 1.000000 | 1.000000 | . 5 145189 | 0 | 0 | 0.739583 | 0.571429 | 0.587426 | . 6 1 | 1 | 1 | 0.000000 | 0.083333 | 0.047222 | . 7 232555 | 1 | 0 | 1.000000 | 1.000000 | 1.000000 | . 8 13944 | 1 | 0 | 1.000000 | 0.250000 | 0.612500 | . 9 5 | 1 | 1 | 0.000000 | 0.083333 | 0.041667 | . 10 232555 | 1 | 0 | 1.000000 | 1.000000 | 1.000000 | . 11 13944 | 1 | 0 | 1.000000 | 0.250000 | 0.612500 | . Evaluating a query model . Define metrics and evaluate query models. See the evaluation page for more examples. . We will define the following evaluation metrics: . % of documents retrieved per query . | recall @ 10 per query . | MRR @ 10 per query . | . from vespa.evaluation import MatchRatio, Recall, ReciprocalRank eval_metrics = [MatchRatio(), Recall(at=10), ReciprocalRank(at=10)] . Evaluate: . evaluation = app.evaluate( labelled_data = labelled_data, eval_metrics = eval_metrics, query_model = query_model, id_field = &quot;id&quot;, ) evaluation . query_id match_ratio_retrieved_docs match_ratio_docs_available match_ratio_value recall_10_value reciprocal_rank_10_value . 0 0 | 1192 | 309201 | 0.003855 | 0.0 | 0 | . 1 1 | 1144 | 309201 | 0.003700 | 0.0 | 0 | .",
            "url": "https://thigm85.github.io/blog/vespa/pyvespa/search/cord19/2020/10/28/connect-to-vespa-instance.html",
            "relUrl": "/vespa/pyvespa/search/cord19/2020/10/28/connect-to-vespa-instance.html",
            "date": " • Oct 28, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Sequential feature selection applied to ranking features",
            "content": "Load data collected from Vespa . The dataset used here were created by collecting ranking features from Vespa associated with the labelled data released by the round 3 of the TREC-CORD competition. . vespa_cord19.head(2) . topic_id iteration cord_uid relevancy query query-rewrite query-vector question narrative fieldMatch(abstract) ... fieldLength(abstract) fieldLength(body_text) fieldLength(title) freshness(timestamp) nativeRank(abstract) nativeRank(abstract_t5) nativeRank(title) rawScore(specter_embedding) rawScore(abstract_embedding) rawScore(title_embedding) . 0 1 | 0.5 | 010vptx3 | 2 | coronavirus origin | coronavirus origin origin COVID-19 information... | (0.28812721371650696, 1.558979868888855, 0.481... | what is the origin of COVID-19 | seeking range of information about the SARS-Co... | 0.111406 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 1 | 2.0 | p0kv1pht | 1 | coronavirus origin | coronavirus origin origin COVID-19 information... | (0.28812721371650696, 1.558979868888855, 0.481... | what is the origin of COVID-19 | seeking range of information about the SARS-Co... | 0.094629 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 2 rows × 172 columns . Ranking features available . There are 163 ranking features available. . features = [ x for x in list(vespa_cord19.columns) if x not in [ &#39;topic_id&#39;, &#39;iteration&#39;, &#39;cord_uid&#39;, &#39;relevancy&#39;, &#39;binary_relevance&#39;, &#39;query&#39;, &#39;query-rewrite&#39;, &#39;query-vector&#39;, &#39;question&#39;, &#39;narrative&#39; ] ] print(len(features)) . 163 . Simplify target label . The original labelled data has three types of label: 0, 1 and 2. To simplify we will consider just two labels here. The document is either relevant (label = 1) or irrelevant (label = 0) . vespa_cord19[&quot;binary_relevance&quot;] = vespa_cord19.apply(lambda row: 1 if row[&quot;relevancy&quot;] &gt; 0 else 0, axis=1) vespa_cord19[[&#39;relevancy&#39;, &#39;binary_relevance&#39;]].head() . relevancy binary_relevance . 0 2 | 1 | . 1 1 | 1 | . 2 2 | 1 | . 3 0 | 0 | . 4 0 | 0 | . Define the model used . from sklearn.linear_model import LogisticRegression estimator = LogisticRegression(penalty=&#39;none&#39;, fit_intercept=True) . Create custom score function . The function needs to have the following format: score_func(y, y_pred, **kwargs). . from math import log from sklearn.metrics import make_scorer def compute_log_prob(y, y_pred): return sum([target*log(prob) + (1-target)*log(1-prob) for prob, target in zip(y_pred, y)]) scorer = make_scorer(score_func=compute_log_prob, needs_proba=True) . Data used . y = vespa_cord19.binary_relevance X = vespa_cord19[features] . Feature Selector . The code below was used to generate the sequential feature selection results that will be analysed in this report. It takes some hours to run on a machine with 32 CPUs. . import os import pandas as pd from mlxtend.feature_selection import SequentialFeatureSelector as SFS columns_to_write = [ &quot;avg_score&quot;, &quot;ci_bound&quot;, &quot;cv_scores&quot;, &quot;feature_idx&quot;, &quot;feature_names&quot;, &quot;std_dev&quot;, &quot;std_err&quot;, &quot;forward&quot;, &quot;floating&quot; ] output_file_name = &quot;sequential_feature.csv&quot; for forward in [True, False]: for floating in [False, True]: sfs = None sfs_df = None sfs = SFS( estimator=estimator, k_features=(1,len(features)), forward=forward, floating=floating, scoring=scorer, cv=4, n_jobs=-1, verbose=1 ) sfs = sfs.fit(X, y) sfs_df = pd.DataFrame.from_dict(sfs.get_metric_dict()).T sfs_df[&quot;forward&quot;] = forward sfs_df[&quot;floating&quot;] = floating if not os.path.isfile(output_file_name): sfs_df.to_csv(output_file_name, index = False, header = True, columns=columns_to_write) columns = list(sfs_df.columns) else: sfs_df.to_csv(output_file_name, mode = &quot;a&quot;, header=False, index = False, columns=columns_to_write) results.append(sfs) . Loading the pre-computed results . from pandas import read_csv data = read_csv(&quot;sequential_feature.csv&quot;) . data.head(2) . avg_score ci_bound cv_scores feature_idx feature_names std_dev std_err forward floating . 0 -2781.720568 | 82.261812 | [-2755.82180826 -2795.84549409 -2856.86996371 ... | (23,) | (&#39;fieldMatch(abstract).significance&#39;,) | 51.318010 | 29.628467 | True | False | . 1 -2728.851119 | 68.207668 | [-2778.41736416 -2698.51375201 -2762.13271275 ... | (10, 23) | (&#39;fieldMatch(abstract).importance&#39;, &#39;fieldMatc... | 42.550507 | 24.566547 | True | False | . Utility functions . from pandas import DataFrame . def create_dfs(df): cv_scores, number_features, feature_names = [], [], [] for idx, row in df.iterrows(): scores = [float(x) for x in row[&quot;cv_scores&quot;].lstrip(&quot;[&quot;).rstrip(&quot;]&quot;).split()] cv_scores.extend(scores) number_features.extend([len(row[&quot;feature_idx&quot;].lstrip(&quot;(&quot;).rstrip(&quot;)&quot;).split(&quot;,&quot;))] * len(scores)) feature_names.extend([row[&quot;feature_names&quot;]] * len(scores)) sequential_selection = DataFrame( data={ &quot;cv_scores&quot;: cv_scores, &quot;number_features&quot;: number_features, &quot;feature_names&quot;: feature_names } ) features = sequential_selection[[&quot;number_features&quot;, &quot;feature_names&quot;]].sort_values(&#39;number_features&#39;).drop_duplicates([&#39;number_features&#39;]) return sequential_selection, features . def display_feature_names(df, number_features): return [x.strip().strip(&quot;&#39;&quot;) for x in df[df.number_features == number_features].iloc[0][&quot;feature_names&quot;].lstrip(&quot;(&quot;).rstrip(&quot;)&quot;).split(&quot;,&quot;)] . Forward sequential selection . forward_df = data[(data[&quot;forward&quot;] == True) &amp; (data[&quot;floating&quot;] == False)] . forward_sequential_selection, forward_features = create_dfs(forward_df) . import plotly.express as px fig = px.box(forward_sequential_selection, x = &quot;number_features&quot;, y=&quot;cv_scores&quot;) fig.show() . display_feature_names(forward_features, 7) . [&#39;fieldMatch(abstract)&#39;, &#39;fieldMatch(abstract).importance&#39;, &#39;fieldMatch(abstract).significance&#39;, &#39;fieldMatch(body_text).absoluteProximity&#39;, &#39;fieldMatch(body_text).fieldCompleteness&#39;, &#39;textSimilarity(body_text).queryCoverage&#39;, &#39;bm25(title)&#39;] . Forward selection with floating . forward_floating_df = data[(data[&quot;forward&quot;] == True) &amp; (data[&quot;floating&quot;] == True)] . forward_floating_sequential_selection, forward_floating_features = create_dfs(forward_floating_df) . import plotly.express as px fig = px.box(forward_floating_sequential_selection, x = &quot;number_features&quot;, y=&quot;cv_scores&quot;) fig.show() . display_feature_names(forward_floating_features, 7) . [&#39;fieldMatch(abstract)&#39;, &#39;fieldMatch(abstract).importance&#39;, &#39;fieldMatch(abstract).significance&#39;, &#39;fieldMatch(body_text).absoluteProximity&#39;, &#39;fieldMatch(body_text).fieldCompleteness&#39;, &#39;textSimilarity(body_text).queryCoverage&#39;, &#39;bm25(title)&#39;] . Backward sequential selection . backward_df = data[(data[&quot;forward&quot;] == False) &amp; (data[&quot;floating&quot;] == False)] . backward_sequential_selection, backward_features = create_dfs(backward_df) . import plotly.express as px fig = px.box(backward_sequential_selection, x = &quot;number_features&quot;, y=&quot;cv_scores&quot;) fig.show() . display_feature_names(backward_features, 7) . [&#39;fieldMatch(abstract).longestSequence&#39;, &#39;fieldMatch(body_text).proximity&#39;, &#39;fieldMatch(body_text).weight&#39;, &#39;fieldMatch(title).matches&#39;, &#39;textSimilarity(title).queryCoverage&#39;, &#39;bm25(abstract)&#39;, &#39;bm25(title)&#39;] . Backward selection with floating . backward_floating_df = data[(data[&quot;forward&quot;] == False) &amp; (data[&quot;floating&quot;] == True)] . backward_floating_sequential_selection, backward_floating_features = create_dfs(backward_floating_df) . import plotly.express as px fig = px.box(backward_floating_sequential_selection, x = &quot;number_features&quot;, y=&quot;cv_scores&quot;) fig.show() . display_feature_names(backward_floating_features, 7) . [&#39;fieldMatch(abstract).absoluteOccurrence&#39;, &#39;fieldMatch(body_text).proximity&#39;, &#39;fieldMatch(body_text).significance&#39;, &#39;fieldMatch(body_text).weight&#39;, &#39;textSimilarity(body_text).fieldCoverage&#39;, &#39;textSimilarity(title).queryCoverage&#39;, &#39;bm25(abstract)&#39;] . Summary . DataFrame(data = { &quot;forward&quot;: display_feature_names(forward_features, 7), &quot;forward_floating&quot;: display_feature_names(forward_floating_features, 7), &quot;backward&quot;: display_feature_names(backward_features, 7), &quot;backward_floating&quot;: display_feature_names(backward_floating_features, 7) }) . forward forward_floating backward backward_floating . 0 fieldMatch(abstract) | fieldMatch(abstract) | fieldMatch(abstract).longestSequence | fieldMatch(abstract).absoluteOccurrence | . 1 fieldMatch(abstract).importance | fieldMatch(abstract).importance | fieldMatch(body_text).proximity | fieldMatch(body_text).proximity | . 2 fieldMatch(abstract).significance | fieldMatch(abstract).significance | fieldMatch(body_text).weight | fieldMatch(body_text).significance | . 3 fieldMatch(body_text).absoluteProximity | fieldMatch(body_text).absoluteProximity | fieldMatch(title).matches | fieldMatch(body_text).weight | . 4 fieldMatch(body_text).fieldCompleteness | fieldMatch(body_text).fieldCompleteness | textSimilarity(title).queryCoverage | textSimilarity(body_text).fieldCoverage | . 5 textSimilarity(body_text).queryCoverage | textSimilarity(body_text).queryCoverage | bm25(abstract) | textSimilarity(title).queryCoverage | . 6 bm25(title) | bm25(title) | bm25(title) | bm25(abstract) | .",
            "url": "https://thigm85.github.io/blog/ranking%20features/vespa/feature%20selection/model%20selection/2020/06/19/sequential-feature-selection-applied-to-ranking-features.html",
            "relUrl": "/ranking%20features/vespa/feature%20selection/model%20selection/2020/06/19/sequential-feature-selection-applied-to-ranking-features.html",
            "date": " • Jun 19, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Reducing the number of initial features to select",
            "content": "Load data collected from Vespa . The dataset used here were created by collecting ranking features from Vespa associated with the labelled data released by the round 3 of the TREC-CORD competition. . vespa_cord19.to_csv(&quot;data/2020-05-27-subset-selection/training_features.csv&quot;, index=False) . vespa_cord19.head(2) . topic_id iteration cord_uid relevancy query query-rewrite query-vector question narrative fieldMatch(abstract) ... fieldLength(abstract) fieldLength(body_text) fieldLength(title) freshness(timestamp) nativeRank(abstract) nativeRank(abstract_t5) nativeRank(title) rawScore(specter_embedding) rawScore(abstract_embedding) rawScore(title_embedding) . 0 1 | 0.5 | 010vptx3 | 2 | coronavirus origin | coronavirus origin origin COVID-19 information... | (0.28812721371650696, 1.558979868888855, 0.481... | what is the origin of COVID-19 | seeking range of information about the SARS-Co... | 0.111406 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 1 | 2.0 | p0kv1pht | 1 | coronavirus origin | coronavirus origin origin COVID-19 information... | (0.28812721371650696, 1.558979868888855, 0.481... | what is the origin of COVID-19 | seeking range of information about the SARS-Co... | 0.094629 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 2 rows × 172 columns . Ranking features available . There are 163 ranking features available. . features = [ x for x in list(vespa_cord19.columns) if x not in [ &#39;topic_id&#39;, &#39;iteration&#39;, &#39;cord_uid&#39;, &#39;relevancy&#39;, &#39;binary_relevance&#39;, &#39;query&#39;, &#39;query-rewrite&#39;, &#39;query-vector&#39;, &#39;question&#39;, &#39;narrative&#39; ] ] print(len(features)) . 163 . features . [&#39;fieldMatch(abstract)&#39;, &#39;fieldMatch(abstract).absoluteOccurrence&#39;, &#39;fieldMatch(abstract).absoluteProximity&#39;, &#39;fieldMatch(abstract).completeness&#39;, &#39;fieldMatch(abstract).degradedMatches&#39;, &#39;fieldMatch(abstract).earliness&#39;, &#39;fieldMatch(abstract).fieldCompleteness&#39;, &#39;fieldMatch(abstract).gapLength&#39;, &#39;fieldMatch(abstract).gaps&#39;, &#39;fieldMatch(abstract).head&#39;, &#39;fieldMatch(abstract).importance&#39;, &#39;fieldMatch(abstract).longestSequence&#39;, &#39;fieldMatch(abstract).longestSequenceRatio&#39;, &#39;fieldMatch(abstract).matches&#39;, &#39;fieldMatch(abstract).occurrence&#39;, &#39;fieldMatch(abstract).orderness&#39;, &#39;fieldMatch(abstract).outOfOrder&#39;, &#39;fieldMatch(abstract).proximity&#39;, &#39;fieldMatch(abstract).queryCompleteness&#39;, &#39;fieldMatch(abstract).relatedness&#39;, &#39;fieldMatch(abstract).segmentDistance&#39;, &#39;fieldMatch(abstract).segmentProximity&#39;, &#39;fieldMatch(abstract).segments&#39;, &#39;fieldMatch(abstract).significance&#39;, &#39;fieldMatch(abstract).significantOccurrence&#39;, &#39;fieldMatch(abstract).tail&#39;, &#39;fieldMatch(abstract).unweightedProximity&#39;, &#39;fieldMatch(abstract).weight&#39;, &#39;fieldMatch(abstract).weightedAbsoluteOccurrence&#39;, &#39;fieldMatch(abstract).weightedOccurrence&#39;, &#39;fieldMatch(abstract_t5)&#39;, &#39;fieldMatch(abstract_t5).absoluteOccurrence&#39;, &#39;fieldMatch(abstract_t5).absoluteProximity&#39;, &#39;fieldMatch(abstract_t5).completeness&#39;, &#39;fieldMatch(abstract_t5).degradedMatches&#39;, &#39;fieldMatch(abstract_t5).earliness&#39;, &#39;fieldMatch(abstract_t5).fieldCompleteness&#39;, &#39;fieldMatch(abstract_t5).gapLength&#39;, &#39;fieldMatch(abstract_t5).gaps&#39;, &#39;fieldMatch(abstract_t5).head&#39;, &#39;fieldMatch(abstract_t5).importance&#39;, &#39;fieldMatch(abstract_t5).longestSequence&#39;, &#39;fieldMatch(abstract_t5).longestSequenceRatio&#39;, &#39;fieldMatch(abstract_t5).matches&#39;, &#39;fieldMatch(abstract_t5).occurrence&#39;, &#39;fieldMatch(abstract_t5).orderness&#39;, &#39;fieldMatch(abstract_t5).outOfOrder&#39;, &#39;fieldMatch(abstract_t5).proximity&#39;, &#39;fieldMatch(abstract_t5).queryCompleteness&#39;, &#39;fieldMatch(abstract_t5).relatedness&#39;, &#39;fieldMatch(abstract_t5).segmentDistance&#39;, &#39;fieldMatch(abstract_t5).segmentProximity&#39;, &#39;fieldMatch(abstract_t5).segments&#39;, &#39;fieldMatch(abstract_t5).significance&#39;, &#39;fieldMatch(abstract_t5).significantOccurrence&#39;, &#39;fieldMatch(abstract_t5).tail&#39;, &#39;fieldMatch(abstract_t5).unweightedProximity&#39;, &#39;fieldMatch(abstract_t5).weight&#39;, &#39;fieldMatch(abstract_t5).weightedAbsoluteOccurrence&#39;, &#39;fieldMatch(abstract_t5).weightedOccurrence&#39;, &#39;fieldMatch(body_text)&#39;, &#39;fieldMatch(body_text).absoluteOccurrence&#39;, &#39;fieldMatch(body_text).absoluteProximity&#39;, &#39;fieldMatch(body_text).completeness&#39;, &#39;fieldMatch(body_text).degradedMatches&#39;, &#39;fieldMatch(body_text).earliness&#39;, &#39;fieldMatch(body_text).fieldCompleteness&#39;, &#39;fieldMatch(body_text).gapLength&#39;, &#39;fieldMatch(body_text).gaps&#39;, &#39;fieldMatch(body_text).head&#39;, &#39;fieldMatch(body_text).importance&#39;, &#39;fieldMatch(body_text).longestSequence&#39;, &#39;fieldMatch(body_text).longestSequenceRatio&#39;, &#39;fieldMatch(body_text).matches&#39;, &#39;fieldMatch(body_text).occurrence&#39;, &#39;fieldMatch(body_text).orderness&#39;, &#39;fieldMatch(body_text).outOfOrder&#39;, &#39;fieldMatch(body_text).proximity&#39;, &#39;fieldMatch(body_text).queryCompleteness&#39;, &#39;fieldMatch(body_text).relatedness&#39;, &#39;fieldMatch(body_text).segmentDistance&#39;, &#39;fieldMatch(body_text).segmentProximity&#39;, &#39;fieldMatch(body_text).segments&#39;, &#39;fieldMatch(body_text).significance&#39;, &#39;fieldMatch(body_text).significantOccurrence&#39;, &#39;fieldMatch(body_text).tail&#39;, &#39;fieldMatch(body_text).unweightedProximity&#39;, &#39;fieldMatch(body_text).weight&#39;, &#39;fieldMatch(body_text).weightedAbsoluteOccurrence&#39;, &#39;fieldMatch(body_text).weightedOccurrence&#39;, &#39;fieldMatch(title)&#39;, &#39;fieldMatch(title).absoluteOccurrence&#39;, &#39;fieldMatch(title).absoluteProximity&#39;, &#39;fieldMatch(title).completeness&#39;, &#39;fieldMatch(title).degradedMatches&#39;, &#39;fieldMatch(title).earliness&#39;, &#39;fieldMatch(title).fieldCompleteness&#39;, &#39;fieldMatch(title).gapLength&#39;, &#39;fieldMatch(title).gaps&#39;, &#39;fieldMatch(title).head&#39;, &#39;fieldMatch(title).importance&#39;, &#39;fieldMatch(title).longestSequence&#39;, &#39;fieldMatch(title).longestSequenceRatio&#39;, &#39;fieldMatch(title).matches&#39;, &#39;fieldMatch(title).occurrence&#39;, &#39;fieldMatch(title).orderness&#39;, &#39;fieldMatch(title).outOfOrder&#39;, &#39;fieldMatch(title).proximity&#39;, &#39;fieldMatch(title).queryCompleteness&#39;, &#39;fieldMatch(title).relatedness&#39;, &#39;fieldMatch(title).segmentDistance&#39;, &#39;fieldMatch(title).segmentProximity&#39;, &#39;fieldMatch(title).segments&#39;, &#39;fieldMatch(title).significance&#39;, &#39;fieldMatch(title).significantOccurrence&#39;, &#39;fieldMatch(title).tail&#39;, &#39;fieldMatch(title).unweightedProximity&#39;, &#39;fieldMatch(title).weight&#39;, &#39;fieldMatch(title).weightedAbsoluteOccurrence&#39;, &#39;fieldMatch(title).weightedOccurrence&#39;, &#39;nativeFieldMatch&#39;, &#39;nativeProximity&#39;, &#39;nativeRank&#39;, &#39;textSimilarity(abstract).fieldCoverage&#39;, &#39;textSimilarity(abstract).order&#39;, &#39;textSimilarity(abstract).proximity&#39;, &#39;textSimilarity(abstract).queryCoverage&#39;, &#39;textSimilarity(abstract).score&#39;, &#39;textSimilarity(abstract_t5).fieldCoverage&#39;, &#39;textSimilarity(abstract_t5).order&#39;, &#39;textSimilarity(abstract_t5).proximity&#39;, &#39;textSimilarity(abstract_t5).queryCoverage&#39;, &#39;textSimilarity(abstract_t5).score&#39;, &#39;textSimilarity(body_text).fieldCoverage&#39;, &#39;textSimilarity(body_text).order&#39;, &#39;textSimilarity(body_text).proximity&#39;, &#39;textSimilarity(body_text).queryCoverage&#39;, &#39;textSimilarity(body_text).score&#39;, &#39;textSimilarity(body_text_t5).fieldCoverage&#39;, &#39;textSimilarity(body_text_t5).order&#39;, &#39;textSimilarity(body_text_t5).proximity&#39;, &#39;textSimilarity(body_text_t5).queryCoverage&#39;, &#39;textSimilarity(body_text_t5).score&#39;, &#39;textSimilarity(title).fieldCoverage&#39;, &#39;textSimilarity(title).order&#39;, &#39;textSimilarity(title).proximity&#39;, &#39;textSimilarity(title).queryCoverage&#39;, &#39;textSimilarity(title).score&#39;, &#39;attribute(has_full_text)&#39;, &#39;bm25(abstract)&#39;, &#39;bm25(abstract_t5)&#39;, &#39;bm25(body_text)&#39;, &#39;bm25(title)&#39;, &#39;fieldLength(abstract)&#39;, &#39;fieldLength(body_text)&#39;, &#39;fieldLength(title)&#39;, &#39;freshness(timestamp)&#39;, &#39;nativeRank(abstract)&#39;, &#39;nativeRank(abstract_t5)&#39;, &#39;nativeRank(title)&#39;, &#39;rawScore(specter_embedding)&#39;, &#39;rawScore(abstract_embedding)&#39;, &#39;rawScore(title_embedding)&#39;] . Simplify target label . The original labelled data has three types of label: 0, 1 and 2. To simplify we will consider just two labels here. The document is either relevant (label = 1) or irrelevant (label = 0) . vespa_cord19[&quot;binary_relevance&quot;] = vespa_cord19.apply(lambda row: 1 if row[&quot;relevancy&quot;] &gt; 0 else 0, axis=1) vespa_cord19[[&#39;relevancy&#39;, &#39;binary_relevance&#39;]].head() . relevancy binary_relevance . 0 2 | 1 | . 1 1 | 1 | . 2 2 | 1 | . 3 0 | 0 | . 4 0 | 0 | . Model . We are going to fit logistic regressions with the objective of maximizing the log probability of the observed outcome. . from sklearn.linear_model import LogisticRegression from statistics import mean def compute_mean_realize_log_prob(model, X, Y): return mean([x[int(y)] for x, y in zip(model.predict_log_proba(X), Y)]) def fit_logistic_reg(X, Y): model = LogisticRegression(penalty=&#39;none&#39;, fit_intercept=True) model.fit(X, Y) realized_log_prob = compute_mean_realize_log_prob(model, X, Y) return realized_log_prob . Subset selection routine . Below we run the subset selection algorithm with only one feature. . import itertools import pandas as pd from tqdm import tnrange, tqdm_notebook #Importing tqdm for the progress bar from tqdm.notebook import trange log_probs, feature_list = [], [] numb_features = [] max_number_features = min(1, len(features)) data = vespa_cord19 Y = data.binary_relevance X = data[features] for k in range(1,max_number_features + 1): for combo in itertools.combinations(X.columns,k): tmp_result = fit_logistic_reg(X[list(combo)],Y) log_probs.append(tmp_result) feature_list.append(combo) numb_features.append(len(combo)) #Store in DataFrame df = pd.DataFrame( { &#39;numb_features&#39;: numb_features, &#39;log_probs&#39;: log_probs, &#39;features&#39;:feature_list } ) . Analyze results . fine-grained results . df . numb_features log_probs features . 0 1 | -0.553448 | (fieldMatch(abstract),) | . 1 1 | -0.568826 | (fieldMatch(abstract).absoluteOccurrence,) | . 2 1 | -0.570800 | (fieldMatch(abstract).absoluteProximity,) | . 3 1 | -0.536799 | (fieldMatch(abstract).completeness,) | . 4 1 | -0.571269 | (fieldMatch(abstract).degradedMatches,) | . ... ... | ... | ... | . 158 1 | -0.571269 | (nativeRank(abstract_t5),) | . 159 1 | -0.571269 | (nativeRank(title),) | . 160 1 | -0.571269 | (rawScore(specter_embedding),) | . 161 1 | -0.571269 | (rawScore(abstract_embedding),) | . 162 1 | -0.571269 | (rawScore(title_embedding),) | . 163 rows × 3 columns . Plot average results across data samples . df[&#39;max_log_probs&#39;] = df.groupby(&#39;numb_features&#39;)[&#39;log_probs&#39;].transform(max) df . numb_features log_probs features max_log_probs . 0 1 | -0.553448 | (fieldMatch(abstract),) | -0.535476 | . 1 1 | -0.568826 | (fieldMatch(abstract).absoluteOccurrence,) | -0.535476 | . 2 1 | -0.570800 | (fieldMatch(abstract).absoluteProximity,) | -0.535476 | . 3 1 | -0.536799 | (fieldMatch(abstract).completeness,) | -0.535476 | . 4 1 | -0.571269 | (fieldMatch(abstract).degradedMatches,) | -0.535476 | . ... ... | ... | ... | ... | . 158 1 | -0.571269 | (nativeRank(abstract_t5),) | -0.535476 | . 159 1 | -0.571269 | (nativeRank(title),) | -0.535476 | . 160 1 | -0.571269 | (rawScore(specter_embedding),) | -0.535476 | . 161 1 | -0.571269 | (rawScore(abstract_embedding),) | -0.535476 | . 162 1 | -0.571269 | (rawScore(title_embedding),) | -0.535476 | . 163 rows × 4 columns . import matplotlib.pyplot as plt %matplotlib inline plt.style.use(&#39;ggplot&#39;) plt.scatter(df.numb_features,df.log_probs, alpha = .2, color = &#39;darkblue&#39;) plt.xlabel(&#39;# Features&#39;) plt.ylabel(&#39;log_probs&#39;) plt.title(&#39;Best subset selection&#39;) plt.plot(df.numb_features,df.max_log_probs, color = &#39;r&#39;, label = &#39;Best subset&#39;) plt.show() . Display the best features for each model size . df_max = df.sort_values(&#39;log_probs&#39;, ascending=False) . for f in df_max.features: print(f) . (&#39;fieldMatch(abstract).significance&#39;,) (&#39;fieldMatch(abstract).importance&#39;,) (&#39;fieldMatch(abstract).completeness&#39;,) (&#39;fieldMatch(abstract).queryCompleteness&#39;,) (&#39;fieldMatch(abstract).weight&#39;,) (&#39;bm25(abstract)&#39;,) (&#39;textSimilarity(abstract).queryCoverage&#39;,) (&#39;bm25(title)&#39;,) (&#39;fieldMatch(title).significance&#39;,) (&#39;fieldMatch(title).importance&#39;,) (&#39;fieldMatch(title).completeness&#39;,) (&#39;fieldMatch(title).weight&#39;,) (&#39;fieldMatch(title).queryCompleteness&#39;,) (&#39;textSimilarity(title).queryCoverage&#39;,) (&#39;fieldMatch(abstract).matches&#39;,) (&#39;fieldMatch(title).matches&#39;,) (&#39;fieldMatch(title)&#39;,) (&#39;nativeRank&#39;,) (&#39;nativeProximity&#39;,) (&#39;fieldMatch(abstract_t5).significance&#39;,) (&#39;nativeFieldMatch&#39;,) (&#39;fieldMatch(abstract_t5).importance&#39;,) (&#39;fieldMatch(abstract).segments&#39;,) (&#39;bm25(abstract_t5)&#39;,) (&#39;fieldMatch(abstract_t5).completeness&#39;,) (&#39;fieldMatch(abstract_t5).queryCompleteness&#39;,) (&#39;fieldMatch(abstract_t5).weight&#39;,) (&#39;textSimilarity(title).fieldCoverage&#39;,) (&#39;fieldMatch(title).occurrence&#39;,) (&#39;fieldMatch(title).fieldCompleteness&#39;,) (&#39;fieldMatch(abstract_t5).matches&#39;,) (&#39;textSimilarity(abstract_t5).queryCoverage&#39;,) (&#39;fieldMatch(title).longestSequence&#39;,) (&#39;fieldMatch(abstract_t5).fieldCompleteness&#39;,) (&#39;fieldMatch(abstract)&#39;,) (&#39;fieldMatch(title).gaps&#39;,) (&#39;fieldMatch(title).earliness&#39;,) (&#39;fieldMatch(abstract_t5).segments&#39;,) (&#39;textSimilarity(abstract_t5).fieldCoverage&#39;,) (&#39;textSimilarity(title).score&#39;,) (&#39;textSimilarity(abstract).score&#39;,) (&#39;fieldMatch(title).segments&#39;,) (&#39;textSimilarity(abstract).fieldCoverage&#39;,) (&#39;fieldMatch(abstract_t5).occurrence&#39;,) (&#39;fieldMatch(title).gapLength&#39;,) (&#39;fieldMatch(title).absoluteOccurrence&#39;,) (&#39;fieldMatch(title).weightedAbsoluteOccurrence&#39;,) (&#39;fieldMatch(abstract).occurrence&#39;,) (&#39;fieldMatch(abstract).fieldCompleteness&#39;,) (&#39;textSimilarity(title).proximity&#39;,) (&#39;fieldMatch(abstract_t5)&#39;,) (&#39;fieldMatch(abstract).longestSequence&#39;,) (&#39;fieldMatch(abstract_t5).longestSequence&#39;,) (&#39;textSimilarity(abstract_t5).score&#39;,) (&#39;fieldMatch(title).outOfOrder&#39;,) (&#39;fieldMatch(abstract).gapLength&#39;,) (&#39;textSimilarity(title).order&#39;,) (&#39;fieldMatch(abstract_t5).segmentDistance&#39;,) (&#39;fieldMatch(abstract).gaps&#39;,) (&#39;fieldMatch(title).relatedness&#39;,) (&#39;fieldMatch(abstract_t5).earliness&#39;,) (&#39;textSimilarity(abstract_t5).order&#39;,) (&#39;fieldMatch(title).segmentProximity&#39;,) (&#39;textSimilarity(abstract_t5).proximity&#39;,) (&#39;fieldMatch(title).unweightedProximity&#39;,) (&#39;fieldMatch(title).proximity&#39;,) (&#39;fieldMatch(title).absoluteProximity&#39;,) (&#39;fieldMatch(title).segmentDistance&#39;,) (&#39;textSimilarity(abstract).proximity&#39;,) (&#39;fieldMatch(title).orderness&#39;,) (&#39;fieldMatch(abstract_t5).absoluteOccurrence&#39;,) (&#39;fieldMatch(abstract_t5).weightedAbsoluteOccurrence&#39;,) (&#39;fieldMatch(abstract_t5).weightedOccurrence&#39;,) (&#39;fieldMatch(abstract_t5).significantOccurrence&#39;,) (&#39;fieldMatch(abstract).earliness&#39;,) (&#39;fieldMatch(abstract_t5).gapLength&#39;,) (&#39;fieldMatch(body_text).absoluteProximity&#39;,) (&#39;fieldMatch(body_text).proximity&#39;,) (&#39;fieldMatch(body_text).unweightedProximity&#39;,) (&#39;fieldMatch(abstract_t5).orderness&#39;,) (&#39;fieldMatch(abstract_t5).gaps&#39;,) (&#39;fieldMatch(body_text).segmentProximity&#39;,) (&#39;textSimilarity(abstract).order&#39;,) (&#39;fieldMatch(title).significantOccurrence&#39;,) (&#39;fieldMatch(title).weightedOccurrence&#39;,) (&#39;fieldMatch(body_text).head&#39;,) (&#39;fieldMatch(body_text).tail&#39;,) (&#39;fieldMatch(abstract_t5).unweightedProximity&#39;,) (&#39;fieldMatch(abstract_t5).absoluteProximity&#39;,) (&#39;fieldMatch(abstract_t5).proximity&#39;,) (&#39;fieldMatch(abstract).outOfOrder&#39;,) (&#39;fieldMatch(body_text).longestSequenceRatio&#39;,) (&#39;fieldMatch(body_text).gaps&#39;,) (&#39;fieldMatch(abstract).longestSequenceRatio&#39;,) (&#39;fieldMatch(body_text).orderness&#39;,) (&#39;fieldMatch(abstract).segmentDistance&#39;,) (&#39;fieldMatch(body_text).gapLength&#39;,) (&#39;fieldMatch(body_text).segmentDistance&#39;,) (&#39;fieldMatch(abstract_t5).outOfOrder&#39;,) (&#39;fieldMatch(abstract).segmentProximity&#39;,) (&#39;fieldMatch(abstract).absoluteOccurrence&#39;,) (&#39;fieldMatch(abstract).weightedAbsoluteOccurrence&#39;,) (&#39;fieldMatch(body_text).outOfOrder&#39;,) (&#39;fieldMatch(title).tail&#39;,) (&#39;fieldMatch(body_text).earliness&#39;,) (&#39;fieldMatch(abstract).orderness&#39;,) (&#39;fieldMatch(title).longestSequenceRatio&#39;,) (&#39;textSimilarity(body_text).order&#39;,) (&#39;fieldMatch(abstract).significantOccurrence&#39;,) (&#39;fieldMatch(abstract).weightedOccurrence&#39;,) (&#39;bm25(body_text)&#39;,) (&#39;textSimilarity(body_text).fieldCoverage&#39;,) (&#39;fieldMatch(abstract).tail&#39;,) (&#39;fieldMatch(body_text).fieldCompleteness&#39;,) (&#39;fieldMatch(body_text)&#39;,) (&#39;fieldMatch(title).head&#39;,) (&#39;fieldMatch(abstract_t5).relatedness&#39;,) (&#39;fieldMatch(abstract_t5).tail&#39;,) (&#39;fieldMatch(abstract_t5).segmentProximity&#39;,) (&#39;fieldMatch(body_text).relatedness&#39;,) (&#39;fieldMatch(body_text).weightedAbsoluteOccurrence&#39;,) (&#39;fieldMatch(body_text).absoluteOccurrence&#39;,) (&#39;fieldMatch(body_text).weightedOccurrence&#39;,) (&#39;fieldMatch(abstract).head&#39;,) (&#39;fieldMatch(abstract).unweightedProximity&#39;,) (&#39;fieldMatch(abstract).absoluteProximity&#39;,) (&#39;fieldMatch(abstract).proximity&#39;,) (&#39;fieldMatch(body_text).significantOccurrence&#39;,) (&#39;fieldMatch(body_text).occurrence&#39;,) (&#39;fieldMatch(body_text).segments&#39;,) (&#39;fieldMatch(abstract_t5).head&#39;,) (&#39;textSimilarity(body_text).queryCoverage&#39;,) (&#39;fieldMatch(body_text).longestSequence&#39;,) (&#39;fieldMatch(body_text).significance&#39;,) (&#39;fieldMatch(body_text).completeness&#39;,) (&#39;fieldMatch(body_text).queryCompleteness&#39;,) (&#39;fieldMatch(body_text).importance&#39;,) (&#39;textSimilarity(body_text).proximity&#39;,) (&#39;fieldMatch(body_text).weight&#39;,) (&#39;fieldMatch(abstract_t5).longestSequenceRatio&#39;,) (&#39;fieldMatch(body_text).matches&#39;,) (&#39;fieldMatch(abstract).relatedness&#39;,) (&#39;textSimilarity(body_text).score&#39;,) (&#39;nativeRank(title)&#39;,) (&#39;nativeRank(abstract)&#39;,) (&#39;freshness(timestamp)&#39;,) (&#39;rawScore(specter_embedding)&#39;,) (&#39;rawScore(abstract_embedding)&#39;,) (&#39;fieldLength(title)&#39;,) (&#39;fieldLength(body_text)&#39;,) (&#39;fieldLength(abstract)&#39;,) (&#39;nativeRank(abstract_t5)&#39;,) (&#39;fieldMatch(abstract_t5).degradedMatches&#39;,) (&#39;fieldMatch(abstract).degradedMatches&#39;,) (&#39;fieldMatch(title).degradedMatches&#39;,) (&#39;attribute(has_full_text)&#39;,) (&#39;fieldMatch(body_text).degradedMatches&#39;,) (&#39;textSimilarity(body_text_t5).score&#39;,) (&#39;textSimilarity(body_text_t5).queryCoverage&#39;,) (&#39;textSimilarity(body_text_t5).proximity&#39;,) (&#39;textSimilarity(body_text_t5).order&#39;,) (&#39;textSimilarity(body_text_t5).fieldCoverage&#39;,) (&#39;rawScore(title_embedding)&#39;,) . Conclusion . Using the predicting performance of individual features does not seem a good approach to eliminate features from a grid search by greedy algorithms. The reason is that many features that perform poorly when considered in isolation would shine when combined with other complementary features. .",
            "url": "https://thigm85.github.io/blog/ranking%20features/vespa/feature%20selection/model%20selection/2020/06/11/select-promissing-ranking-features.html",
            "relUrl": "/ranking%20features/vespa/feature%20selection/model%20selection/2020/06/11/select-promissing-ranking-features.html",
            "date": " • Jun 11, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "Best subset selection of Vespa ranking features",
            "content": "Load data collected from Vespa . The dataset used here were created by collecting ranking features from Vespa associated with the labelled data released by the round 3 of the TREC-CORD competition. . vespa_cord19.head(2) . topic_id iteration cord_uid relevancy query query-rewrite query-vector question narrative fieldMatch(abstract) ... fieldLength(body_text) fieldLength(title) freshness(timestamp) nativeRank(abstract) nativeRank(abstract_t5) nativeRank(title) rawScore(specter_embedding) rawScore(abstract_embedding) rawScore(title_embedding) binary_relevance . 0 1 | 0.5 | 010vptx3 | 2 | coronavirus origin | coronavirus origin origin COVID-19 information... | (0.28812721371650696, 1.558979868888855, 0.481... | what is the origin of COVID-19 | seeking range of information about the SARS-Co... | 0.111406 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | . 1 1 | 2.0 | p0kv1pht | 1 | coronavirus origin | coronavirus origin origin COVID-19 information... | (0.28812721371650696, 1.558979868888855, 0.481... | what is the origin of COVID-19 | seeking range of information about the SARS-Co... | 0.094629 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | . 2 rows × 173 columns . There are 163 ranking features available. Below we print the first three as a sample. . features = [ x for x in list(vespa_cord19.columns) if x not in [ &#39;topic_id&#39;, &#39;iteration&#39;, &#39;cord_uid&#39;, &#39;relevancy&#39;, &#39;binary_relevance&#39;, &#39;query&#39;, &#39;query-rewrite&#39;, &#39;query-vector&#39;, &#39;question&#39;, &#39;narrative&#39; ] ] print(len(features)) print(features[:3]) . 163 [&#39;fieldMatch(abstract)&#39;, &#39;fieldMatch(abstract).absoluteOccurrence&#39;, &#39;fieldMatch(abstract).absoluteProximity&#39;] . The original labelled data has three types of label: 0, 1 and 2. To simplify we will consider just two labels here. The document is either relevant (label = 1) or irrelevant (label = 0) . vespa_cord19[&quot;binary_relevance&quot;] = vespa_cord19.apply(lambda row: 1 if row[&quot;relevancy&quot;] &gt; 0 else 0, axis=1) vespa_cord19[[&#39;relevancy&#39;, &#39;binary_relevance&#39;]].head() . relevancy binary_relevance . 0 2 | 1 | . 1 1 | 1 | . 2 2 | 1 | . 3 0 | 0 | . 4 0 | 0 | . Model . We are going to fit logistic regressions with the objective of maximizing the log probability of the observed outcome. . from sklearn.linear_model import LogisticRegression from statistics import mean def compute_mean_realize_log_prob(model, X, Y): return mean([x[int(y)] for x, y in zip(model.predict_log_proba(X), Y)]) def fit_logistic_reg(X, Y): model = LogisticRegression(penalty=&#39;none&#39;, fit_intercept=True) model.fit(X, Y) realized_log_prob = compute_mean_realize_log_prob(model, X, Y) return realized_log_prob . Subset selection routine . Give the high number of features, we can only apply the best subset selection algorithm up to three features. Instead of running one logistic regression for each feature combination, we will run 10 replications with smaller sampled datasets with 1.000 data points. . The code below was adapted from this blog post written by Xavier Bourret Sicotte. . import itertools import pandas as pd from tqdm import tnrange, tqdm_notebook #Importing tqdm for the progress bar from tqdm.notebook import trange #Initialization variables log_probs, feature_list = [], [] numb_features = [] data_sample = [] number_sample = 10 number_points_per_sample = 1000 max_number_features = min(3, len(features)) for i in range(number_sample): data = vespa_cord19.sample(n=number_points_per_sample, random_state=456) Y = data.binary_relevance X = data[features] #Looping over k = 1 to k = 11 features in X for k in trange(1,max_number_features + 1, desc = &#39;Loop...&#39;): print(k) #Looping over all possible combinations: from 11 choose k for combo in itertools.combinations(X.columns,k): tmp_result = fit_logistic_reg(X[list(combo)],Y) #Store temp result log_probs.append(tmp_result) #Append lists feature_list.append(combo) numb_features.append(len(combo)) data_sample.append(i) #Store in DataFrame df = pd.DataFrame( { &#39;data_sample&#39;: data_sample, &#39;numb_features&#39;: numb_features, &#39;log_probs&#39;: log_probs, &#39;features&#39;:feature_list } ) . Analyze results . fine-grained results . Even with the limitation of checking at most 3 features we end up running more than 7 million logistic regressions to obtain the results presented here. . df . data_sample numb_features log_probs features . 0 0 | 1 | -0.577166 | (fieldMatch(abstract),) | . 1 0 | 1 | -0.584612 | (fieldMatch(abstract).absoluteOccurrence,) | . 2 0 | 1 | -0.589084 | (fieldMatch(abstract).absoluteProximity,) | . 3 0 | 1 | -0.563372 | (fieldMatch(abstract).completeness,) | . 4 0 | 1 | -0.589136 | (fieldMatch(abstract).degradedMatches,) | . ... ... | ... | ... | ... | . 7219265 9 | 3 | -0.589136 | (nativeRank(abstract_t5), rawScore(abstract_em... | . 7219266 9 | 3 | -0.589136 | (nativeRank(title), rawScore(specter_embedding... | . 7219267 9 | 3 | -0.589136 | (nativeRank(title), rawScore(specter_embedding... | . 7219268 9 | 3 | -0.589136 | (nativeRank(title), rawScore(abstract_embeddin... | . 7219269 9 | 3 | -0.589136 | (rawScore(specter_embedding), rawScore(abstrac... | . 7219270 rows × 4 columns . Average across data samples . We can now average the results across the 10 replications we runned for each combination. . average_df = df.groupby([&#39;numb_features&#39;, &#39;features&#39;], as_index=False).mean() average_df . numb_features features data_sample log_probs . 0 1 | (attribute(has_full_text),) | 4.5 | -0.589136 | . 1 1 | (bm25(abstract),) | 4.5 | -0.560556 | . 2 1 | (bm25(abstract_t5),) | 4.5 | -0.574475 | . 3 1 | (bm25(body_text),) | 4.5 | -0.587452 | . 4 1 | (bm25(title),) | 4.5 | -0.558449 | . ... ... | ... | ... | ... | . 721922 3 | (textSimilarity(title).score, nativeRank(title... | 4.5 | -0.576275 | . 721923 3 | (textSimilarity(title).score, nativeRank(title... | 4.5 | -0.576275 | . 721924 3 | (textSimilarity(title).score, rawScore(abstrac... | 4.5 | -0.576275 | . 721925 3 | (textSimilarity(title).score, rawScore(specter... | 4.5 | -0.576275 | . 721926 3 | (textSimilarity(title).score, rawScore(specter... | 4.5 | -0.576275 | . 721927 rows × 4 columns . Plot average results across data samples . average_df[&#39;max_log_probs&#39;] = df.groupby(&#39;numb_features&#39;)[&#39;log_probs&#39;].transform(max) average_df . numb_features features data_sample log_probs max_log_probs . 0 1 | (attribute(has_full_text),) | 4.5 | -0.589136 | -0.558449 | . 1 1 | (bm25(abstract),) | 4.5 | -0.560556 | -0.558449 | . 2 1 | (bm25(abstract_t5),) | 4.5 | -0.574475 | -0.558449 | . 3 1 | (bm25(body_text),) | 4.5 | -0.587452 | -0.558449 | . 4 1 | (bm25(title),) | 4.5 | -0.558449 | -0.558449 | . ... ... | ... | ... | ... | ... | . 721922 3 | (textSimilarity(title).score, nativeRank(title... | 4.5 | -0.576275 | -0.534266 | . 721923 3 | (textSimilarity(title).score, nativeRank(title... | 4.5 | -0.576275 | -0.534266 | . 721924 3 | (textSimilarity(title).score, rawScore(abstrac... | 4.5 | -0.576275 | -0.534266 | . 721925 3 | (textSimilarity(title).score, rawScore(specter... | 4.5 | -0.576275 | -0.534266 | . 721926 3 | (textSimilarity(title).score, rawScore(specter... | 4.5 | -0.576275 | -0.534266 | . 721927 rows × 5 columns . import matplotlib.pyplot as plt %matplotlib inline plt.style.use(&#39;ggplot&#39;) plt.scatter(average_df.numb_features,average_df.log_probs, alpha = .2, color = &#39;darkblue&#39;) plt.xlabel(&#39;# Features&#39;) plt.ylabel(&#39;log_probs&#39;) plt.title(&#39;Best subset selection&#39;) plt.plot(average_df.numb_features,average_df.max_log_probs, color = &#39;r&#39;, label = &#39;Best subset&#39;) plt.show() . Display the best features for each model size . average_df_max = average_df.sort_values(&#39;log_probs&#39;, ascending=False).drop_duplicates([&#39;numb_features&#39;]).sort_values(&#39;numb_features&#39;) . for f in average_df_max.features: print(f) . (&#39;bm25(title)&#39;,) (&#39;textSimilarity(title).queryCoverage&#39;, &#39;bm25(abstract)&#39;) (&#39;textSimilarity(abstract).proximity&#39;, &#39;textSimilarity(title).queryCoverage&#39;, &#39;bm25(abstract)&#39;) .",
            "url": "https://thigm85.github.io/blog/ranking%20features/vespa/feature%20selection/model%20selection/2020/05/27/subset-selection.html",
            "relUrl": "/ranking%20features/vespa/feature%20selection/model%20selection/2020/05/27/subset-selection.html",
            "date": " • May 27, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "Semantic text search with Vespa python API",
            "content": "Connect to a running Vespa application . It is assumed that you have deployed the MS MARCO full-text vespa sample app in your local machine. . from vespa.application import Vespa app = Vespa(url=&quot;http://localhost&quot;, port=8080) . Load the BERT model . Loading one of the many models available. . from sentence_transformers import SentenceTransformer bert_model = SentenceTransformer(&quot;distilbert-base-nli-stsb-mean-tokens&quot;) . Define a function that take a text as input and return a vector of floats as output. . import numpy as np def normalized_bert_encoder(text): vector = bert_model.encode([text])[0].tolist() norm = np.linalg.norm(vector) if norm &gt; 0.0: vector = vector / norm return vector.tolist() . Define a query model . from vespa.query import Query, Union, WeakAnd, ANN, RankProfile query_model = Query( match_phase=Union( WeakAnd(hits=1000), ANN( doc_vector=&quot;title_bert&quot;, query_vector=&quot;tensor_bert&quot;, embedding_model=normalized_bert_encoder, hits=1000, label=&quot;ann_title&quot; ), ANN( doc_vector=&quot;body_bert&quot;, query_vector=&quot;tensor_bert&quot;, embedding_model=normalized_bert_encoder, hits=1000, label=&quot;ann_body&quot; ) ), rank_profile=RankProfile(name=&quot;bert_title_body_all&quot;) ) . At this point we can query our application: . query_results = app.query(query=&quot;this is a test&quot;, query_model=query_model) . Load labelled data . I will load a sample of the test set that I used in my experiments. . import requests import json labelled_data = json.loads( requests.get(&quot;https://thigm85.github.io/data/msmarco/labelled_data_msmarco_test_set.json&quot;).text ) . Here it is the first two queries with their respective relevant documents. . labelled_data[0:2] . [{&#39;query_id&#39;: &#39;848370&#39;, &#39;query&#39;: &#39;what is the state bird of rhode island&#39;, &#39;relevant_docs&#39;: [{&#39;id&#39;: &#39;D2533084&#39;}]}, {&#39;query_id&#39;: &#39;230835&#39;, &#39;query&#39;: &#39;how far is dallas airport from downtown&#39;, &#39;relevant_docs&#39;: [{&#39;id&#39;: &#39;D1327232&#39;}]}] . Evaluate the query model . from vespa.evaluation import MatchRatio, Recall, ReciprocalRank eval_metrics = [MatchRatio(), Recall(at = 100), ReciprocalRank(at = 100)] . evaluation = app.evaluate( labelled_data=labelled_data, eval_metrics=eval_metrics, query_model=query_model, id_field=&quot;id&quot;, timeout=5 ) . evaluation.head() . query_id match_ratio_retrieved_docs match_ratio_docs_available match_ratio_value recall_100_value reciprocal_rank_100_value . 0 848370 | 12738 | 99577 | 0.127921 | 0 | 0.000000 | . 1 230835 | 12533 | 99577 | 0.125862 | 1 | 1.000000 | . 2 915794 | 11523 | 99577 | 0.115719 | 0 | 0.000000 | . 3 733084 | 20047 | 99577 | 0.201322 | 0 | 0.000000 | . 4 23313 | 17423 | 99577 | 0.174970 | 1 | 0.111111 | . Baseline query model . baseline_query_model = Query( match_phase=WeakAnd(hits=1000), rank_profile=RankProfile(name=&quot;bm25&quot;) ) . baseline_evaluation = app.evaluate( labelled_data=labelled_data, eval_metrics=eval_metrics, query_model=baseline_query_model, id_field=&quot;id&quot;, timeout=5 ) . baseline_evaluation.head() . query_id match_ratio_retrieved_docs match_ratio_docs_available match_ratio_value recall_100_value reciprocal_rank_100_value . 0 848370 | 7160 | 99577 | 0.071904 | 1 | 1.000000 | . 1 230835 | 7581 | 99577 | 0.076132 | 1 | 1.000000 | . 2 915794 | 6067 | 99577 | 0.060928 | 1 | 0.142857 | . 3 733084 | 15283 | 99577 | 0.153479 | 1 | 1.000000 | . 4 23313 | 13424 | 99577 | 0.134810 | 1 | 0.333333 | . Compare query model with baseline . from pandas import merge eval_comparison = merge(left=baseline_evaluation, right=evaluation, on=&quot;query_id&quot;, suffixes=(&#39;_baseline&#39;, &#39;&#39;)) . Match Ratio . eval_comparison[[&quot;match_ratio_value_baseline&quot;, &quot;match_ratio_value&quot;]].describe() . match_ratio_value_baseline match_ratio_value . count 500.000000 | 500.000000 | . mean 0.124775 | 0.179036 | . std 0.116852 | 0.116558 | . min 0.000000 | 0.000000 | . 25% 0.067169 | 0.122315 | . 50% 0.083393 | 0.138973 | . 75% 0.121597 | 0.180619 | . max 0.873666 | 0.887836 | . Recall . eval_comparison[[&quot;recall_100_value_baseline&quot;, &quot;recall_100_value&quot;]].describe() . recall_100_value_baseline recall_100_value . count 500.000000 | 500.000000 | . mean 0.842000 | 0.586000 | . std 0.365106 | 0.493042 | . min 0.000000 | 0.000000 | . 25% 1.000000 | 0.000000 | . 50% 1.000000 | 1.000000 | . 75% 1.000000 | 1.000000 | . max 1.000000 | 1.000000 | . Reciprocal rank comparison . eval_comparison[[&quot;reciprocal_rank_100_value_baseline&quot;, &quot;reciprocal_rank_100_value&quot;]].describe() . reciprocal_rank_100_value_baseline reciprocal_rank_100_value . count 500.000000 | 500.000000 | . mean 0.675333 | 0.449417 | . std 0.413238 | 0.453405 | . min 0.000000 | 0.000000 | . 25% 0.237500 | 0.000000 | . 50% 1.000000 | 0.333333 | . 75% 1.000000 | 1.000000 | . max 1.000000 | 1.000000 | . Sometimes it is helpful to visually see the difference between the two query models. . from pandas import concat from plotnine import ggplot, geom_boxplot, aes baseline_evaluation[&quot;query_model_name&quot;] = &quot;bm25&quot; evaluation[&quot;query_model_name&quot;] = &quot;bert&quot; data_plot = concat([evaluation, baseline_evaluation]) ggplot(data_plot) + geom_boxplot(aes(x=&#39;query_model_name&#39;, y=&#39;reciprocal_rank_100_value&#39;)) . &lt;ggplot: (349088749)&gt; . Collect training data . When collecting training data, it is important to use a rank profile that applied a random ordering of the matched documents. . data_collection_query_model = Query( match_phase=Union( WeakAnd(hits=1000), ANN( doc_vector=&quot;title_bert&quot;, query_vector=&quot;tensor_bert&quot;, embedding_model=normalized_bert_encoder, hits=1000, label=&quot;ann_title&quot; ), ANN( doc_vector=&quot;body_bert&quot;, query_vector=&quot;tensor_bert&quot;, embedding_model=normalized_bert_encoder, hits=1000, label=&quot;ann_body&quot; ) ), rank_profile=RankProfile( name=&quot;collect_rank_features_embeddings&quot;, list_features=True) ) . Once we have defined the data_collection_query_model, we can collect data containing both relevant and random documents. . training_data = app.collect_training_data( labelled_data=labelled_data, id_field=&quot;id&quot;, query_model=data_collection_query_model, number_random_docs=99 ) . training_data.head() . bm25(body) bm25(title) nativeRank(body) nativeRank(title) rankingExpression(dot_product_body_bert) rankingExpression(dot_product_body_gse) rankingExpression(dot_product_body_word2vec) rankingExpression(dot_product_title_bert) rankingExpression(dot_product_title_gse) rankingExpression(dot_product_title_word2vec) document_id query_id relevant . 0 26.474014 | 9.612229 | 0.314493 | 8.557759e-02 | 0.247331 | 0.0 | 0.0 | 0.562989 | 0.0 | 0.0 | D2533084 | 848370 | 1 | . 1 3.247162 | 0.000000 | 0.117618 | 1.351221e-38 | 0.080011 | 0.0 | 0.0 | 0.205397 | 0.0 | 0.0 | D864574 | 848370 | 0 | . 2 3.259604 | 0.000000 | 0.156522 | 1.351221e-38 | 0.011655 | 0.0 | 0.0 | 0.171949 | 0.0 | 0.0 | D3246601 | 848370 | 0 | . 3 1.853070 | 0.835559 | 0.121469 | 6.774715e-02 | 0.274763 | 0.0 | 0.0 | 0.292467 | 0.0 | 0.0 | D3028705 | 848370 | 0 | . 4 7.327304 | 0.000000 | 0.153262 | 1.351221e-38 | 0.045287 | 0.0 | 0.0 | 0.048524 | 0.0 | 0.0 | D289677 | 848370 | 0 | . We can now create a figure that is similar to the one displayed in semantic text search tutorial that shows the MS MARCO bias toward term-matching signals like BM25. . import plotly.graph_objects as go relevant_training_data = training_data[training_data[&quot;relevant&quot;] == 1] fig = go.Figure() fig.add_trace( go.Histogram( x=training_data[&quot;bm25(body)&quot;] + training_data[&quot;bm25(title)&quot;], histnorm=&#39;probability density&#39;, name = &quot;relevant + random&quot; ) ) fig.add_trace( go.Histogram( x=relevant_training_data[&quot;bm25(body)&quot;] + relevant_training_data[&quot;bm25(title)&quot;], histnorm=&#39;probability density&#39;, name = &quot;relevant&quot; ) ) fig.update_layout(barmode=&#39;overlay&#39;) fig.update_traces(opacity=0.5) fig.show() .",
            "url": "https://thigm85.github.io/blog/ms%20marco/vespa/semantic%20search/text%20search/2020/05/15/msmarco-evaluation.html",
            "relUrl": "/ms%20marco/vespa/semantic%20search/text%20search/2020/05/15/msmarco-evaluation.html",
            "date": " • May 15, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "Vespa submission to round 1 of TREC-COVID",
            "content": "This piece will reproduce a possible round 1 TREC-COVID submission generated with the cord19.vespa.ai application. . . Vespa . Connect to the CORD-19 Vespa API. . from vespa.application import Vespa app = Vespa(url = &quot;https://api.cord19.vespa.ai&quot;) . Define the query model used for the submission. . from vespa.query import Query, OR, RankProfile query_model = Query( match_phase = OR(), rank_profile = RankProfile(name=&quot;bm25t5&quot;) ) . Submission . Load the topics provided by the organizers. . import requests import json topics = json.loads(requests.get(&quot;https://thigm85.github.io/data/covid19/topics-annotated.json&quot;).text) . Generate the submissions by querying the Vespa application, and organizing the results according to the TREC output format. We only return 2 hits for each request as an example. Feel free to change that to 1000 when generating your own submmission. . from pandas import DataFrame submission = [] for t in topics: id = t[&#39;id&#39;] question = t[&#39;question&#39;] query = t[&#39;query&#39;] narrative = t[&#39;narrative&#39;] query = question + &#39; &#39; + query + &#39; &#39; + narrative result = app.query( query=query, query_model=query_model, hits = 2, model = {&#39;defaultIndex&#39;: &#39;allt5&#39;}, summary = &#39;default&#39;, timeout = &#39;15s&#39;, collapsefield = &#39;cord_uid&#39;, bolding = &#39;false&#39; ) i = 0 for h in result[&#39;root&#39;][&#39;children&#39;]: i+=1 submission.append( {&quot;topicid&quot;: id, &quot;Q0&quot;: &quot;Q0&quot;, &quot;docid&quot;: h[&quot;fields&quot;].get(&#39;cord_uid&#39;), &quot;rank&quot;: i, &quot;score&quot;: h[&#39;relevance&#39;], &quot;run-tag&quot;: query_model.rank_profile.name }) submission = DataFrame.from_records(submission) . submission . topicid Q0 docid rank score run-tag . 0 1 | Q0 | lfndq85x | 1 | 70.993937 | bm25t5 | . 1 1 | Q0 | z14rf85c | 2 | 70.613335 | bm25t5 | . 2 2 | Q0 | exqza1kg | 1 | 92.731966 | bm25t5 | . 3 2 | Q0 | r9scxa76 | 2 | 88.443326 | bm25t5 | . 4 3 | Q0 | rq5nqm92 | 1 | 80.897894 | bm25t5 | . ... ... | ... | ... | ... | ... | ... | . 65 33 | Q0 | 79yna07e | 2 | 96.310245 | bm25t5 | . 66 34 | Q0 | gd5btv69 | 1 | 81.606707 | bm25t5 | . 67 34 | Q0 | 8p9d1c9k | 2 | 76.193660 | bm25t5 | . 68 35 | Q0 | 6xkm2j0f | 1 | 109.850018 | bm25t5 | . 69 35 | Q0 | vaeyoxv7 | 2 | 107.736848 | bm25t5 | . 70 rows × 6 columns .",
            "url": "https://thigm85.github.io/blog/covid-19/vespa/2020/05/08/trec-covid-round-1-submission.html",
            "relUrl": "/covid-19/vespa/2020/05/08/trec-covid-round-1-submission.html",
            "date": " • May 8, 2020"
        }
        
    
  
    
        ,"post12": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://thigm85.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post13": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://thigm85.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Principal Data Scientist at Verizon Media working on vespa.ai. .",
          "url": "https://thigm85.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://thigm85.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}