{
  
    
        "post0": {
            "title": "Semantic text search with Vespa python API",
            "content": "Connect to a running Vespa application . It is assumed that you have deployed the MS MARCO full-text vespa sample app in your local machine. . from vespa.application import Vespa app = Vespa(url=&quot;http://localhost&quot;, port=8080) . Load the BERT model . Loading one of the many models available. . from sentence_transformers import SentenceTransformer bert_model = SentenceTransformer(&quot;distilbert-base-nli-stsb-mean-tokens&quot;) . Define a function that take a text as input and return a vector of floats as output. . import numpy as np def normalized_bert_encoder(text): vector = bert_model.encode([text])[0].tolist() norm = np.linalg.norm(vector) if norm &gt; 0.0: vector = vector / norm return vector.tolist() . Define a query model . from vespa.query import Query, Union, WeakAnd, ANN, RankProfile query_model = Query( match_phase=Union( WeakAnd(hits=1000), ANN( doc_vector=&quot;title_bert&quot;, query_vector=&quot;tensor_bert&quot;, embedding_model=normalized_bert_encoder, hits=1000, label=&quot;ann_title&quot; ), ANN( doc_vector=&quot;body_bert&quot;, query_vector=&quot;tensor_bert&quot;, embedding_model=normalized_bert_encoder, hits=1000, label=&quot;ann_body&quot; ) ), rank_profile=RankProfile(name=&quot;bert_title_body_all&quot;) ) . At this point we can query our application: . query_results = app.query(query=&quot;this is a test&quot;, query_model=query_model) . Load labelled data . I will load a sample of the test set that I used in my experiments. . import requests import json labelled_data = json.loads( requests.get(&quot;https://thigm85.github.io/data/msmarco/labelled_data_msmarco_test_set.json&quot;).text ) . Here it is the first two queries with their respective relevant documents. . labelled_data[0:2] . [{&#39;query_id&#39;: &#39;848370&#39;, &#39;query&#39;: &#39;what is the state bird of rhode island&#39;, &#39;relevant_docs&#39;: [{&#39;id&#39;: &#39;D2533084&#39;}]}, {&#39;query_id&#39;: &#39;230835&#39;, &#39;query&#39;: &#39;how far is dallas airport from downtown&#39;, &#39;relevant_docs&#39;: [{&#39;id&#39;: &#39;D1327232&#39;}]}] . Evaluate the query model . from vespa.evaluation import MatchRatio, Recall, ReciprocalRank eval_metrics = [MatchRatio(), Recall(at = 100), ReciprocalRank(at = 100)] . evaluation = app.evaluate( labelled_data=labelled_data, eval_metrics=eval_metrics, query_model=query_model, id_field=&quot;id&quot;, timeout=5 ) . evaluation.head() . query_id match_ratio_retrieved_docs match_ratio_docs_available match_ratio_value recall_100_value reciprocal_rank_100_value . 0 848370 | 12738 | 99577 | 0.127921 | 0 | 0.000000 | . 1 230835 | 12533 | 99577 | 0.125862 | 1 | 1.000000 | . 2 915794 | 11523 | 99577 | 0.115719 | 0 | 0.000000 | . 3 733084 | 20047 | 99577 | 0.201322 | 0 | 0.000000 | . 4 23313 | 17423 | 99577 | 0.174970 | 1 | 0.111111 | . Baseline query model . baseline_query_model = Query( match_phase=WeakAnd(hits=1000), rank_profile=RankProfile(name=&quot;bm25&quot;) ) . baseline_evaluation = app.evaluate( labelled_data=labelled_data, eval_metrics=eval_metrics, query_model=baseline_query_model, id_field=&quot;id&quot;, timeout=5 ) . baseline_evaluation.head() . query_id match_ratio_retrieved_docs match_ratio_docs_available match_ratio_value recall_100_value reciprocal_rank_100_value . 0 848370 | 7160 | 99577 | 0.071904 | 1 | 1.000000 | . 1 230835 | 7581 | 99577 | 0.076132 | 1 | 1.000000 | . 2 915794 | 6067 | 99577 | 0.060928 | 1 | 0.142857 | . 3 733084 | 15283 | 99577 | 0.153479 | 1 | 1.000000 | . 4 23313 | 13424 | 99577 | 0.134810 | 1 | 0.333333 | . Compare query model with baseline . from pandas import merge eval_comparison = merge(left=baseline_evaluation, right=evaluation, on=&quot;query_id&quot;, suffixes=(&#39;_baseline&#39;, &#39;&#39;)) . Match Ratio . eval_comparison[[&quot;match_ratio_value_baseline&quot;, &quot;match_ratio_value&quot;]].describe() . match_ratio_value_baseline match_ratio_value . count 500.000000 | 500.000000 | . mean 0.124775 | 0.179036 | . std 0.116852 | 0.116558 | . min 0.000000 | 0.000000 | . 25% 0.067169 | 0.122315 | . 50% 0.083393 | 0.138973 | . 75% 0.121597 | 0.180619 | . max 0.873666 | 0.887836 | . Recall . eval_comparison[[&quot;recall_100_value_baseline&quot;, &quot;recall_100_value&quot;]].describe() . recall_100_value_baseline recall_100_value . count 500.000000 | 500.000000 | . mean 0.842000 | 0.586000 | . std 0.365106 | 0.493042 | . min 0.000000 | 0.000000 | . 25% 1.000000 | 0.000000 | . 50% 1.000000 | 1.000000 | . 75% 1.000000 | 1.000000 | . max 1.000000 | 1.000000 | . Reciprocal rank comparison . eval_comparison[[&quot;reciprocal_rank_100_value_baseline&quot;, &quot;reciprocal_rank_100_value&quot;]].describe() . reciprocal_rank_100_value_baseline reciprocal_rank_100_value . count 500.000000 | 500.000000 | . mean 0.675333 | 0.449417 | . std 0.413238 | 0.453405 | . min 0.000000 | 0.000000 | . 25% 0.237500 | 0.000000 | . 50% 1.000000 | 0.333333 | . 75% 1.000000 | 1.000000 | . max 1.000000 | 1.000000 | . Sometimes it is helpful to visually see the difference between the two query models. . from pandas import concat from plotnine import ggplot, geom_boxplot, aes baseline_evaluation[&quot;query_model_name&quot;] = &quot;bm25&quot; evaluation[&quot;query_model_name&quot;] = &quot;bert&quot; data_plot = concat([evaluation, baseline_evaluation]) ggplot(data_plot) + geom_boxplot(aes(x=&#39;query_model_name&#39;, y=&#39;reciprocal_rank_100_value&#39;)) . &lt;ggplot: (349088749)&gt; . Collect training data . When collecting training data, it is important to use a rank profile that applied a random ordering of the matched documents. . data_collection_query_model = Query( match_phase=Union( WeakAnd(hits=1000), ANN( doc_vector=&quot;title_bert&quot;, query_vector=&quot;tensor_bert&quot;, embedding_model=normalized_bert_encoder, hits=1000, label=&quot;ann_title&quot; ), ANN( doc_vector=&quot;body_bert&quot;, query_vector=&quot;tensor_bert&quot;, embedding_model=normalized_bert_encoder, hits=1000, label=&quot;ann_body&quot; ) ), rank_profile=RankProfile( name=&quot;collect_rank_features_embeddings&quot;, list_features=True) ) . Once we have defined the data_collection_query_model, we can collect data containing both relevant and random documents. . training_data = app.collect_training_data( labelled_data=labelled_data, id_field=&quot;id&quot;, query_model=data_collection_query_model, number_random_docs=99 ) . training_data.head() . bm25(body) bm25(title) nativeRank(body) nativeRank(title) rankingExpression(dot_product_body_bert) rankingExpression(dot_product_body_gse) rankingExpression(dot_product_body_word2vec) rankingExpression(dot_product_title_bert) rankingExpression(dot_product_title_gse) rankingExpression(dot_product_title_word2vec) document_id query_id relevant . 0 26.474014 | 9.612229 | 0.314493 | 8.557759e-02 | 0.247331 | 0.0 | 0.0 | 0.562989 | 0.0 | 0.0 | D2533084 | 848370 | 1 | . 1 3.247162 | 0.000000 | 0.117618 | 1.351221e-38 | 0.080011 | 0.0 | 0.0 | 0.205397 | 0.0 | 0.0 | D864574 | 848370 | 0 | . 2 3.259604 | 0.000000 | 0.156522 | 1.351221e-38 | 0.011655 | 0.0 | 0.0 | 0.171949 | 0.0 | 0.0 | D3246601 | 848370 | 0 | . 3 1.853070 | 0.835559 | 0.121469 | 6.774715e-02 | 0.274763 | 0.0 | 0.0 | 0.292467 | 0.0 | 0.0 | D3028705 | 848370 | 0 | . 4 7.327304 | 0.000000 | 0.153262 | 1.351221e-38 | 0.045287 | 0.0 | 0.0 | 0.048524 | 0.0 | 0.0 | D289677 | 848370 | 0 | . We can now create a figure that is similar to the one displayed in semantic text search tutorial that shows the MS MARCO bias toward term-matching signals like BM25. . import plotly.graph_objects as go relevant_training_data = training_data[training_data[&quot;relevant&quot;] == 1] fig = go.Figure() fig.add_trace( go.Histogram( x=training_data[&quot;bm25(body)&quot;] + training_data[&quot;bm25(title)&quot;], histnorm=&#39;probability density&#39;, name = &quot;relevant + random&quot; ) ) fig.add_trace( go.Histogram( x=relevant_training_data[&quot;bm25(body)&quot;] + relevant_training_data[&quot;bm25(title)&quot;], histnorm=&#39;probability density&#39;, name = &quot;relevant&quot; ) ) fig.update_layout(barmode=&#39;overlay&#39;) fig.update_traces(opacity=0.5) fig.show() .",
            "url": "https://thigm85.github.io/blog/ms%20marco/vespa/semantic%20search/text%20search/2020/05/15/msmarco-evaluation.html",
            "relUrl": "/ms%20marco/vespa/semantic%20search/text%20search/2020/05/15/msmarco-evaluation.html",
            "date": " • May 15, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Vespa submission to round 1 of TREC-COVID",
            "content": "This piece will reproduce a possible round 1 TREC-COVID submission generated with the cord19.vespa.ai application. . . Vespa . Connect to the CORD-19 Vespa API. . from vespa.application import Vespa app = Vespa(url = &quot;https://api.cord19.vespa.ai&quot;) . Define the query model used for the submission. . from vespa.query import Query, OR, RankProfile query_model = Query( match_phase = OR(), rank_profile = RankProfile(name=&quot;bm25t5&quot;) ) . Submission . Load the topics provided by the organizers. . import requests import json topics = json.loads(requests.get(&quot;https://thigm85.github.io/data/covid19/topics-annotated.json&quot;).text) . Generate the submissions by querying the Vespa application, and organizing the results according to the TREC output format. We only return 2 hits for each request as an example. Feel free to change that to 1000 when generating your own submmission. . from pandas import DataFrame submission = [] for t in topics: id = t[&#39;id&#39;] question = t[&#39;question&#39;] query = t[&#39;query&#39;] narrative = t[&#39;narrative&#39;] query = question + &#39; &#39; + query + &#39; &#39; + narrative result = app.query( query=query, query_model=query_model, hits = 2, model = {&#39;defaultIndex&#39;: &#39;allt5&#39;}, summary = &#39;default&#39;, timeout = &#39;15s&#39;, collapsefield = &#39;cord_uid&#39;, bolding = &#39;false&#39; ) i = 0 for h in result[&#39;root&#39;][&#39;children&#39;]: i+=1 submission.append( {&quot;topicid&quot;: id, &quot;Q0&quot;: &quot;Q0&quot;, &quot;docid&quot;: h[&quot;fields&quot;].get(&#39;cord_uid&#39;), &quot;rank&quot;: i, &quot;score&quot;: h[&#39;relevance&#39;], &quot;run-tag&quot;: query_model.rank_profile.name }) submission = DataFrame.from_records(submission) . submission . topicid Q0 docid rank score run-tag . 0 1 | Q0 | lfndq85x | 1 | 70.993937 | bm25t5 | . 1 1 | Q0 | z14rf85c | 2 | 70.613335 | bm25t5 | . 2 2 | Q0 | exqza1kg | 1 | 92.731966 | bm25t5 | . 3 2 | Q0 | r9scxa76 | 2 | 88.443326 | bm25t5 | . 4 3 | Q0 | rq5nqm92 | 1 | 80.897894 | bm25t5 | . ... ... | ... | ... | ... | ... | ... | . 65 33 | Q0 | 79yna07e | 2 | 96.310245 | bm25t5 | . 66 34 | Q0 | gd5btv69 | 1 | 81.606707 | bm25t5 | . 67 34 | Q0 | 8p9d1c9k | 2 | 76.193660 | bm25t5 | . 68 35 | Q0 | 6xkm2j0f | 1 | 109.850018 | bm25t5 | . 69 35 | Q0 | vaeyoxv7 | 2 | 107.736848 | bm25t5 | . 70 rows × 6 columns .",
            "url": "https://thigm85.github.io/blog/covid-19/vespa/2020/05/08/trec-covid-round-1-submission.html",
            "relUrl": "/covid-19/vespa/2020/05/08/trec-covid-round-1-submission.html",
            "date": " • May 8, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://thigm85.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://thigm85.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Principal Data Scientist at Verizon Media working on vespa.ai. .",
          "url": "https://thigm85.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://thigm85.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}